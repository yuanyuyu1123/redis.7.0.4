# Redis configuration file example.
# Redis 配置文件示例。
#
# Note that in order to read the configuration file, Redis must be
# started with the file path as first argument:
# 请注意，为了读取配置文件，Redis 必须以文件路径作为第一个参数启动：
#
# ./redis-server /path/to/redis.conf

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
# 单位注意事项：当需要内存大小时，可以以通常的形式指定它 1k 5GB 4M 等等：
#
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.
# 单位不区分大小写，因此 1GB 1Gb 1gB 都是一样的。

################################## INCLUDES ###################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
# 在此处包含一个或多个其他配置文件。如果您有一个适用于所有 Redis 服务器的标准模板，
# 但还需要自定义一些每个服务器的设置，这将非常有用。包含文件可以包含其他文件，因此请明智地使用它。
#
# Note that option "include" won't be rewritten by command "CONFIG REWRITE"
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you'd better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
# 请注意，选项“include”不会被管理员或 Redis Sentinel 的命令“CONFIG REWRITE”重写。
# 由于 Redis 始终使用最后处理的行作为配置指令的值，因此您最好将包含放在此文件的开头以避免在运行时覆盖配置更改。
#
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
# 相反，如果您有兴趣使用包含来覆盖配置选项，最好使用包含作为最后一行。
#
# Included paths may contain wildcards. All files matching the wildcards will
# be included in alphabetical order.
# Note that if an include path contains a wildcards but no files match it when
# the server is started, the include statement will be ignored and no error will
# be emitted.  It is safe, therefore, to include wildcard files from empty
# directories.
# 包含的路径可能包含通配符。所有与通配符匹配的文件都将按字母顺序包含在内。
# 请注意，如果包含路径包含通配符但在服务器启动时没有文件匹配它，则包含语句将被忽略并且不会发出错误。
# 因此，从空目录中包含通配符文件是安全的。
#
# include /path/to/local.conf
# include /path/to/other.conf
# include /path/to/fragments/*.conf
#

################################## MODULES #####################################

# Load modules at startup. If the server is not able to load modules
# it will abort. It is possible to use multiple loadmodule directives.
# 在启动时加载模块。如果服务器无法加载模块，它将中止。可以使用多个 loadmodule 指令。
#
# loadmodule /path/to/my_module.so
# loadmodule /path/to/other_module.so

################################## NETWORK #####################################

# By default, if no "bind" configuration directive is specified, Redis listens
# for connections from all available network interfaces on the host machine.
# It is possible to listen to just one or multiple selected interfaces using
# the "bind" configuration directive, followed by one or more IP addresses.
# Each address can be prefixed by "-", which means that redis will not fail to
# start if the address is not available. Being not available only refers to
# addresses that does not correspond to any network interface. Addresses that
# are already in use will always fail, and unsupported protocols will always BE
# silently skipped.
# 默认情况下，如果没有指定“绑定”配置指令，Redis 会侦听来自主机上所有可用网络接口的连接。
# 可以使用“绑定”配置指令仅监听一个或多个选定的接口，然后是一个或多个 IP 地址。
# 每个地址都可以加上“-”前缀，表示如果地址不可用，redis不会启动失败。
# 不可用仅指不对应于任何网络接口的地址。
# 已经在使用的地址总是会失败，不受支持的协议总是会被默默地跳过。
#
# Examples:
#
# bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses 监听两个特定的 IPv4 地址
# bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6 监听环回 IPv4 和 IPv6
# bind * -::*                     # like the default, all available interfaces 和默认一样，所有可用的接口
#
# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the
# internet, binding to all the interfaces is dangerous and will expose the
# instance to everybody on the internet. So by default we uncomment the
# following bind directive, that will force Redis to listen only on the
# IPv4 and IPv6 (if available) loopback interface addresses (this means Redis
# will only be able to accept client connections from the same host that it is
# running on).
# ~~~ 警告~~~
# 如果运行 Redis 的计算机直接暴露在互联网上，绑定到所有接口是危险的，并且会将实例暴露给互联网上的每个人。
# 因此，默认情况下，我们取消注释以下绑定指令，这将强制 Redis 仅侦听 IPv4 和 IPv6（如果可用）环回接口地址
# （这意味着 Redis 将只能接受来自运行它的同一主机的客户端连接）。
#
# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES
# COMMENT OUT THE FOLLOWING LINE.
# 如果您确定您希望您的实例收听所有接口，请在以下行中添加注释。
#
# You will also need to set a password unless you explicitly disable protected
# mode.
# 除非您明确禁用保护模式，否则您还需要设置密码。
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#bind 127.0.0.1 -::1

# By default, outgoing connections (from replica to master, from Sentinel to
# instances, cluster bus, etc.) are not bound to a specific local address. In
# most cases, this means the operating system will handle that based on routing
# and the interface through which the connection goes out.
# 默认情况下，传出连接（从副本到主服务器、从 Sentinel 到实例、集群总线等）不绑定到特定的本地地址。
# 在大多数情况下，这意味着操作系统将根据路由和连接发出的接口来处理。
#
# Using bind-source-addr it is possible to configure a specific address to bind
# to, which may also affect how the connection gets routed.
# 使用 bind-source-addr 可以配置要绑定到的特定地址，这也可能会影响连接的路由方式。
#
# Example:
#
# bind-source-addr 10.0.0.1

# Protected mode is a layer of security protection, in order to avoid that
# Redis instances left open on the internet are accessed and exploited.
# 保护模式是一层安全保护，以避免在互联网上打开的 Redis 实例被访问和利用。
#
# When protected mode is on and the default user has no password, the server
# only accepts local connections from the IPv4 address (127.0.0.1), IPv6 address
# (::1) or Unix domain sockets.
# 当保护模式打开且默认用户没有密码时，服务器只接受来自 IPv4 地址 (127.0.0.1)、IPv6 地址 (::1) 或 Unix 域套接字的本地连接。
#
# By default protected mode is enabled. You should disable it only if
# you are sure you want clients from other hosts to connect to Redis
# even if no authentication is configured.
# 默认情况下启用保护模式。仅当您确定希望其他主机的客户端连接到 Redis 时才应禁用它，即使未配置身份验证也是如此。
protected-mode no

# Redis uses default hardened security configuration directives to reduce the
# attack surface on innocent users. Therefore, several sensitive configuration
# directives are immutable, and some potentially-dangerous commands are blocked.
# Redis 使用默认的强化安全配置指令来减少对无辜用户的攻击面。
# 因此，一些敏感的配置指令是不可变的，并且一些潜在危险的命令被阻止。
#
# Configuration directives that control files that Redis writes to (e.g., 'dir'
# and 'dbfilename') and that aren't usually modified during runtime
# are protected by making them immutable.
# 控制 Redis 写入的文件（例如，'dir' 和 'dbfilename'）并且通常在运行时不被修改的配置指令通过使其不可变来得到保护。
#
# Commands that can increase the attack surface of Redis and that aren't usually
# called by users are blocked by default.
# 默认情况下会阻止可能增加 Redis 攻击面且用户通常不调用的命令。
#
# These can be exposed to either all connections or just local ones by setting
# each of the configs listed below to either of these values:
# 通过将下面列出的每个配置设置为以下任一值，这些可以暴露给所有连接或仅暴露给本地连接：
#
# no    - Block for any connection (remain immutable) 阻止任何连接（保持不变）
# yes   - Allow for any connection (no protection) 允许任何连接（无保护）
# local - Allow only for local connections. Ones originating from the
#         IPv4 address (127.0.0.1), IPv6 address (::1) or Unix domain sockets.
#         仅允许本地连接。源自 IPv4 地址 (127.0.0.1)、IPv6 地址 (::1) 或 Unix 域套接字的那些。
#
# enable-protected-configs no
# enable-debug-command no
# enable-module-command no

# Accept connections on the specified port, default is 6379 (IANA #815344).
# If port 0 is specified Redis will not listen on a TCP socket.
# 接受指定端口上的连接，默认为 6379 (IANA 815344)。如果指定端口 0，Redis 将不会侦听 TCP 套接字。
port 6379

# TCP listen() backlog. TCP 侦听（）积压。
#
# In high requests-per-second environments you need a high backlog in order
# to avoid slow clients connection issues. Note that the Linux kernel
# will silently truncate it to the value of /proc/sys/net/core/somaxconn so
# make sure to raise both the value of somaxconn and tcp_max_syn_backlog
# in order to get the desired effect.
# 在每秒请求数较高的环境中，您需要大量积压，以避免客户端连接缓慢问题。
# 请注意，Linux 内核会默默地将其截断为 procsysnetcoresomaxconn 的值，
# 因此请确保同时提高 somaxconn 和 tcp_max_syn_backlog 的值以获得所需的效果。
tcp-backlog 511

# Unix socket.
#
# Specify the path for the Unix socket that will be used to listen for
# incoming connections. There is no default, so Redis will not listen
# on a unix socket when not specified.
# 指定将用于侦听传入连接的 Unix 套接字的路径。没有默认值，因此 Redis 在未指定时不会侦听 unix 套接字。
#
# unixsocket /run/redis.sock
# unixsocketperm 700

# Close the connection after a client is idle for N seconds (0 to disable)
# 客户端空闲 N 秒后关闭连接（0 表示禁用）
timeout 0

# TCP keepalive.
#
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication. This is useful for two reasons:
#
# 1) Detect dead peers.
# 2) Force network equipment in the middle to consider the connection to be
#    alive.
#
# On Linux, the specified value (in seconds) is the period used to send ACKs.
# Note that to close the connection the double of the time is needed.
# On other kernels the period depends on the kernel configuration.
#
# A reasonable value for this option is 300 seconds, which is the new
# Redis default starting with Redis 3.2.1.
# TCP 保活。如果非零，则使用 SO_KEEPALIVE 在没有通信的情况下向客户端发送 TCP ACK。
# 这有两个原因：
#   1) 检测死节点。
#   2）强制中间的网络设备认为连接是活动的。
# 在 Linux 上，指定的值（以秒为单位）是用于发送 ACK 的周期。
# 请注意，要关闭连接，需要双倍的时间。在其他内核上，周期取决于内核配置。
# 此选项的合理值是 300 秒，这是从 Redis 3.2.1 开始的新 Redis 默认值。
tcp-keepalive 300

# Apply OS-specific mechanism to mark the listening socket with the specified
# ID, to support advanced routing and filtering capabilities.
#
# On Linux, the ID represents a connection mark.
# On FreeBSD, the ID represents a socket cookie ID.
# On OpenBSD, the ID represents a route table ID.
#
# The default value is 0, which implies no marking is required.
# socket-mark-id 0
# 应用特定于操作系统的机制来标记具有指定 ID 的侦听套接字，以支持高级路由和过滤功能。
# 在 Linux 上，ID 代表一个连接标记。
# 在 FreeBSD 上，ID 代表一个套接字 cookie ID。
# 在 OpenBSD 上，ID 代表一个路由表 ID。
# 默认值为 0，这意味着不需要标记。套接字标记 id 0

################################# TLS/SSL #####################################

# By default, TLS/SSL is disabled. To enable it, the "tls-port" configuration
# directive can be used to define TLS-listening ports. To enable TLS on the
# default port, use:
# 默认情况下，禁用 TLSSSL。
# 要启用它，“tls-port”配置指令可用于定义 TLS 侦听端口。
# 要在默认端口上启用 TLS，请使用：
#
# port 0
# tls-port 6379

# Configure a X.509 certificate and private key to use for authenticating the
# server to connected clients, masters or cluster peers.  These files should be
# PEM formatted.
# 配置 X.509 证书和私钥以用于向连接的客户端、主服务器或集群对等方验证服务器。
# 这些文件应为 PEM 格式。
#
# tls-cert-file redis.crt
# tls-key-file redis.key
#
# If the key file is encrypted using a passphrase, it can be included here
# as well.
# 如果密钥文件是使用密码加密的，它也可以包含在此处。
#
# tls-key-file-pass secret

# Normally Redis uses the same certificate for both server functions (accepting
# connections) and client functions (replicating from a master, establishing
# cluster bus connections, etc.).
# 通常，Redis 对服务器功能（接受连接）和客户端功能（从主服务器复制、建立集群总线连接等）使用相同的证书。
#
# Sometimes certificates are issued with attributes that designate them as
# client-only or server-only certificates. In that case it may be desired to use
# different certificates for incoming (server) and outgoing (client)
# connections. To do that, use the following directives:
# 有时颁发的证书带有将它们指定为仅客户端或仅服务器证书的属性。
# 在这种情况下，可能需要对传入（服务器）和传出（客户端）连接使用不同的证书。
# 为此，请使用以下指令：
#
# tls-client-cert-file client.crt
# tls-client-key-file client.key
#
# If the key file is encrypted using a passphrase, it can be included here
# as well.
# 如果密钥文件是使用密码加密的，它也可以包含在此处。
#
# tls-client-key-file-pass secret

# Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange,
# required by older versions of OpenSSL (<3.0). Newer versions do not require
# this configuration and recommend against it.
# 配置 DH 参数文件以启用旧版本 OpenSSL (<3.0) 所需的 Diffie-Hellman (DH) 密钥交换。
# 较新的版本不需要此配置，建议不要这样做。
#
# tls-dh-params-file redis.dh

# Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL
# clients and peers.  Redis requires an explicit configuration of at least one
# of these, and will not implicitly use the system wide configuration.
# 配置 CA 证书包或目录以验证 TLSSSL 客户端和对等方。 Redis 至少需要其中一项的显式配置，并且不会隐式使用系统范围的配置。
#
# tls-ca-cert-file ca.crt
# tls-ca-cert-dir /etc/ssl/certs

# By default, clients (including replica servers) on a TLS port are required
# to authenticate using valid client side certificates.
# 默认情况下，TLS 端口上的客户端（包括副本服务器）需要使用有效的客户端证书进行身份验证。
#
# If "no" is specified, client certificates are not required and not accepted.
# If "optional" is specified, client certificates are accepted and must be
# valid if provided, but are not required.
# 如果指定“否”，则不需要且不接受客户端证书。如果指定了“可选”，则接受客户端证书，如果提供，则必须是有效的，但不是必需的。
#
# tls-auth-clients no
# tls-auth-clients optional

# By default, a Redis replica does not attempt to establish a TLS connection
# with its master.
# 默认情况下，Redis 副本不会尝试与其主服务器建立 TLS 连接。
#
# Use the following directive to enable TLS on replication links.
# 使用以下指令在复制链接上启用 TLS。
#
# tls-replication yes

# By default, the Redis Cluster bus uses a plain TCP connection. To enable
# TLS for the bus protocol, use the following directive:
# 默认情况下，Redis 集群总线使用纯 TCP 连接。要为总线协议启用 TLS，请使用以下指令：
#
# tls-cluster yes

# By default, only TLSv1.2 and TLSv1.3 are enabled and it is highly recommended
# that older formally deprecated versions are kept disabled to reduce the attack surface.
# You can explicitly specify TLS versions to support.
# Allowed values are case insensitive and include "TLSv1", "TLSv1.1", "TLSv1.2",
# "TLSv1.3" (OpenSSL >= 1.1.1) or any combination.
# To enable only TLSv1.2 and TLSv1.3, use:
# 默认情况下，仅启用 TLSv1.2 和 TLSv1.3，强烈建议禁用旧的正式弃用版本以减少攻击面。
# 您可以明确指定要支持的 TLS 版本。
# 允许的值不区分大小写，包括“TLSv1”、“TLSv1.1”、“TLSv1.2”、“TLSv1.3”（OpenSSL >= 1.1.1）或任何组合。
# 要仅启用 TLSv1.2 和 TLSv1.3，请使用：
#
# tls-protocols "TLSv1.2 TLSv1.3"

# Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information
# about the syntax of this string.
# 配置允许的密码。有关此字符串的语法的更多信息，请参见 ciphers(1ssl) 联机帮助页。
#
# Note: this configuration applies only to <= TLSv1.2.
# 注意：此配置仅适用于 <= TLSv1.2。

#
# tls-ciphers DEFAULT:!MEDIUM

# Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more
# information about the syntax of this string, and specifically for TLSv1.3
# ciphersuites.
# 配置允许的 TLSv1.3 密码套件。请参阅 ciphers(1ssl) 手册页以获取有关此字符串语法的更多信息，特别是 TLSv1.3 密码套件。
#
# tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256

# When choosing a cipher, use the server's preference instead of the client
# preference. By default, the server follows the client's preference.
# 选择密码时，请使用服务器的首选项而不是客户端的首选项。默认情况下，服务器遵循客户端的偏好。
#
# tls-prefer-server-ciphers yes

# By default, TLS session caching is enabled to allow faster and less expensive
# reconnections by clients that support it. Use the following directive to disable
# caching.
# 默认情况下，启用 TLS 会话缓存以允许支持它的客户端更快、更便宜地重新连接。使用以下指令禁用缓存。
#
# tls-session-caching no

# Change the default number of TLS sessions cached. A zero value sets the cache
# to unlimited size. The default size is 20480.
# 更改缓存的默认 TLS 会话数。零值将缓存设置为无限大小。默认大小为 20480。
#
# tls-session-cache-size 5000

# Change the default timeout of cached TLS sessions. The default timeout is 300
# seconds.
# 更改缓存 TLS 会话的默认超时。默认超时为 300 秒。
#
# tls-session-cache-timeout 60

################################# GENERAL #####################################

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
# When Redis is supervised by upstart or systemd, this parameter has no impact.
# 默认情况下，Redis 不作为守护进程运行。如果需要，请使用“是”。
# 请注意，Redis 在守护进程时会在 var/run/redis.pid 中写入一个 pid 文件。
# 当 Redis 由 upstart 或 systemd 监督时，此参数没有影响。
daemonize no

# If you run Redis from upstart or systemd, Redis can interact with your
# supervision tree. Options:
#   supervised no      - no supervision interaction
#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode
#                        requires "expect stop" in your upstart job config
#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET
#                        on startup, and updating Redis status on a regular
#                        basis.
#   supervised auto    - detect upstart or systemd method based on
#                        UPSTART_JOB or NOTIFY_SOCKET environment variables
# Note: these supervision methods only signal "process is ready."
#       They do not enable continuous pings back to your supervisor.
#
# The default is "no". To run under upstart/systemd, you can simply uncomment
# the line below:
# 如果您从 upstart 或 systemd 运行 Redis，Redis 可以与您的监督树进行交互。
#选项：
#  supervised no - 无监督交互
#  supervised upstart - 通过将 Redis 置于 SIGSTOP 模式来发出信号 upstart 需要在你的 upstart 作业配置中“预期停止”
#  supervised systemd - 通过在启动时将 READY=1 写入 NOTIFY_SOCKET 来发出 systemd 信号，并在启动时更新 Redis 状态定期。
#  supervised auto - 根据 UPSTART_JOB 或 NOTIFY_SOCKET 环境变量检测 upstart 或 systemd 方法
# 注意：这些监督方法仅表示“进程已准备好”。它们不会启用连续 ping 回您的主管。
# 默认值为“否”。要在 upstartsystemd 下运行，您可以简单地取消注释以下行：
#
# supervised auto

# If a pid file is specified, Redis writes it where specified at startup
# and removes it at exit.
#
# When the server runs non daemonized, no pid file is created if none is
# specified in the configuration. When the server is daemonized, the pid file
# is used even if not specified, defaulting to "/var/run/redis.pid".
#
# Creating a pid file is best effort: if Redis is not able to create it
# nothing bad happens, the server will start and run normally.
#
# Note that on modern Linux systems "/run/redis.pid" is more conforming
# and should be used instead.
# 如果指定了 pid 文件，Redis 会在启动时将其写入指定位置，并在退出时将其删除。
# 当服务器运行非守护进程时，如果配置中没有指定 pid 文件，则不会创建 pid 文件。
# 当服务器被守护时，即使没有指定pid文件也会使用，默认为“var/run/redis.pid”。
# 创建一个 pid 文件是最好的努力：如果 Redis 无法创建它，没有任何不好的事情发生，服务器将启动并正常运行。
# 请注意，在现代 Linux 系统上，“run/redis.pid”更符合要求，应改为使用。
pidfile /var/run/redis_6379.pid

# Specify the server verbosity level.
# This can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
# 指定服务器详细级别。这可以是以下之一：
# debug（大量信息，对开发测试有用）
# verbose（许多很少有用的信息，但不像调试级别那样混乱）
# notice（适度冗长，可能是您在生产中想要的）
# warning（仅非常重要记录关键消息）
loglevel debug

# Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
# 指定日志文件名。此外，空字符串可用于强制 Redis 登录标准输出。
# 请注意，如果您使用标准输出进行日志记录但守护进程，则日志将被发送到 devnull
logfile "access.log"

# To enable logging to the system logger, just set 'syslog-enabled' to yes,
# and optionally update the other syslog parameters to suit your needs.
# 要启用对系统记录器的日志记录，只需将“启用系统日志”设置为是，并可选择更新其他系统日志参数以满足您的需要。
# syslog-enabled no

# Specify the syslog identity.
# 指定系统日志标识。
# syslog-ident redis

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.
# 指定系统日志工具。必须是 USER 或介于 LOCAL0-LOCAL7 之间。
# syslog-facility local0

# To disable the built in crash log, which will possibly produce cleaner core
# dumps when they are needed, uncomment the following:
# 要禁用内置崩溃日志，这可能会在需要时产生更清晰的核心转储，请取消注释以下内容：
#
# crash-log-enabled no

# To disable the fast memory check that's run as part of the crash log, which
# will possibly let redis terminate sooner, uncomment the following:
# 要禁用作为崩溃日志的一部分运行的快速内存检查，这可能会让 redis 更快终止，请取消注释以下内容：
#
# crash-memcheck-enabled no

# Set the number of databases. The default database is DB 0, you can select
# a different one on a per-connection basis using SELECT <dbid> where
# dbid is a number between 0 and 'databases'-1
# 设置数据库的数量。默认数据库是 DB 0，您可以使用 SELECT <dbid> 为每个连接选择不同的数据库，
# 其中 dbid 是介于 0 和 'databases'-1 之间的数字
databases 16

# By default Redis shows an ASCII art logo only when started to log to the
# standard output and if the standard output is a TTY and syslog logging is
# disabled. Basically this means that normally a logo is displayed only in
# interactive sessions.
#
# However it is possible to force the pre-4.0 behavior and always show a
# ASCII art logo in startup logs by setting the following option to yes.
# 默认情况下，Redis 仅在开始记录到标准输出并且标准输出是 TTY 并且禁用 syslog 记录时才会显示 ASCII 艺术徽标。
# 基本上，这意味着通常徽标仅在交互式会话中显示。
# 但是，可以通过将以下选项设置为 yes 来强制执行 4.0 之前的行为并始终在启动日志中显示 ASCII 艺术徽标。
always-show-logo no

# By default, Redis modifies the process title (as seen in 'top' and 'ps') to
# provide some runtime information. It is possible to disable this and leave
# the process name as executed by setting the following to no.
# 默认情况下，Redis 会修改进程标题（如“top”和“ps”所示）以提供一些运行时信息。
# 可以通过将以下设置为 no 来禁用此功能并将进程名称保留为已执行。
set-proc-title yes

# When changing the process title, Redis uses the following template to construct
# the modified title.
# 在更改进程标题时，Redis 使用以下模板来构造修改后的标题。
#
# Template variables are specified in curly brackets. The following variables are
# supported:
# 模板变量在大括号中指定。支持以下变量：
#
# {title}           Name of process as executed if parent, or type of child process. 如果是父进程，则执行的进程名称或子进程的类型。
# {listen-addr}     Bind address or '*' followed by TCP or TLS port listening on, or
#                   Unix socket if only that's available. 绑定地址或 '' 后跟 TCP 或 TLS 端口侦听，或 Unix 套接字（如果可用）。
# {server-mode}     Special mode, i.e. "[sentinel]" or "[cluster]".
# {port}            TCP port listening on, or 0.
# {tls-port}        TLS port listening on, or 0.
# {unixsocket}      Unix domain socket listening on, or "".
# {config-file}     Name of configuration file used. 使用的配置文件的名称。
#
proc-title-template "{title} {listen-addr} {server-mode}"

################################ SNAPSHOTTING  ################################

# Save the DB to disk.
#
# save <seconds> <changes> [<seconds> <changes> ...]
#
# Redis will save the DB if the given number of seconds elapsed and it
# surpassed the given number of write operations against the DB.
# 如果经过给定的秒数并且超过了对数据库的给定写入操作次数，Redis 将保存数据库。
#
# Snapshotting can be completely disabled with a single empty string argument
# as in following example:
# 可以使用单个空字符串参数完全禁用快照，如下例所示：
#
# save ""
#
# Unless specified otherwise, by default Redis will save the DB:
#   * After 3600 seconds (an hour) if at least 1 change was performed
#   * After 300 seconds (5 minutes) if at least 100 changes were performed
#   * After 60 seconds if at least 10000 changes were performed
# 除非另有说明，否则默认情况下 Redis 将保存 DB：
#     如果执行了至少 1 次更改，则在 3600 秒（一小时）后
#     如果执行了至少 100 次更改，则 300 秒（5 分钟）后
#     如果执行了至少 10000 次更改，则 60 秒后
#
# You can set these explicitly by uncommenting the following line.
# 您可以通过取消注释以下行来显式设置这些。
#
# save 3600 1 300 100 60 10000

# By default Redis will stop accepting writes if RDB snapshots are enabled
# (at least one save point) and the latest background save failed.
# This will make the user aware (in a hard way) that data is not persisting
# on disk properly, otherwise chances are that no one will notice and some
# disaster will happen.
# 默认情况下，如果启用 RDB 快照（至少一个保存点）并且最近的后台保存失败，Redis 将停止接受写入。
# 这将使用户意识到（以一种艰难的方式）数据没有正确地保存在磁盘上，否则很可能没有人会注意到并且会发生一些灾难。
#
# If the background saving process will start working again Redis will
# automatically allow writes again.
# 如果后台保存过程将再次开始工作，Redis 将自动再次允许写入。
#
# However if you have setup your proper monitoring of the Redis server
# and persistence, you may want to disable this feature so that Redis will
# continue to work as usual even if there are problems with disk,
# permissions, and so forth.
# 但是，如果您已经设置了对 Redis 服务器和持久性的适当监控，您可能希望禁用此功能，
# 以便 Redis 将继续照常工作，即使磁盘、权限等存在问题。
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases?
# By default compression is enabled as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
# 转储 .rdb 数据库时使用 LZF 压缩字符串对象？默认情况下启用压缩，因为它几乎总是一个胜利。
# 如果您想在保存子节点中节省一些 CPU，请将其设置为“否”，但如果您有可压缩的值或键，则数据集可能会更大。
rdbcompression yes

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.
# 从 RDB 版本 5 开始，CRC64 校验和被放置在文件的末尾。
# 这使得格式更能抵抗损坏，但在保存和加载 RDB 文件时需要支付性能损失（大约 10%），因此您可以禁用它以获得最佳性能。
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
# 禁用校验和创建的 RDB 文件的校验和为零，这将告诉加载代码跳过检查。
rdbchecksum yes

# Enables or disables full sanitization checks for ziplist and listpack etc when
# loading an RDB or RESTORE payload. This reduces the chances of a assertion or
# crash later on while processing commands.
# Options:
#   no         - Never perform full sanitization
#   yes        - Always perform full sanitization
#   clients    - Perform full sanitization only for user connections.
#                Excludes: RDB files, RESTORE commands received from the master
#                connection, and client connections which have the
#                skip-sanitize-payload ACL flag.
# The default should be 'clients' but since it currently affects cluster
# resharding via MIGRATE, it is temporarily set to 'no' by default.
# 在加载 RDB 或 RESTORE 有效负载时启用或禁用对 ziplist 和 listpack 等的完整清理检查。
# 这减少了稍后在处理命令时发生断言或崩溃的机会。
# 选项：
#   no - 从不执行全面清理
#   yes - 始终执行全面清理
#   clients - 仅对用户连接执行全面清理。不包括：RDB 文件、从主连接接收到的 RESTORE 命令
#             以及具有 skip-sanitize-payload ACL 标志的客户端连接。
# 默认值应该是“clients”，但由于它目前通过 MIGRATE 影响集群重新分片，因此默认情况下暂时设置为“no”。
#
# sanitize-dump-payload no

# The filename where to dump the DB
# 转储数据库的文件名
dbfilename dump.rdb

# Remove RDB files used by replication in instances without persistence
# enabled. By default this option is disabled, however there are environments
# where for regulations or other security concerns, RDB files persisted on
# disk by masters in order to feed replicas, or stored on disk by replicas
# in order to load them for the initial synchronization, should be deleted
# ASAP. Note that this option ONLY WORKS in instances that have both AOF
# and RDB persistence disabled, otherwise is completely ignored.
#
# An alternative (and sometimes better) way to obtain the same effect is
# to use diskless replication on both master and replicas instances. However
# in the case of replicas, diskless is not always an option.
# 在未启用持久性的情况下删除复制使用的 RDB 文件。
# 默认情况下，此选项是禁用的，但是在某些环境中，出于法规或其他安全考虑，
# RDB 文件应由 master 保存在磁盘上以提供副本，或由副本存储在磁盘上以便加载它们以进行初始同步。尽快删除。
# 请注意，此选项仅适用于同时禁用 AOF 和 RDB 持久性的实例，否则将被完全忽略。
# 获得相同效果的另一种（有时是更好的）方法是在主实例和副本实例上使用无盘复制。
# 然而，在副本的情况下，无盘并不总是一种选择。
rdb-del-sync-files no

# The working directory.
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
#
# The Append Only File will also be created inside this directory.
#
# Note that you must specify a directory here, not a file name.
# 工作目录。数据库将写入此目录中，并使用上面使用“dbfilename”配置指令指定的文件名。
# Append Only File 也将在此目录中创建。
# 请注意，您必须在此处指定目录，而不是文件名。
dir ./

################################# REPLICATION #################################

# Master-Replica replication. Use replicaof to make a Redis instance a copy of
# another Redis server. A few things to understand ASAP about Redis replication.
# 主副本复制。使用 replicaof 使 Redis 实例成为另一个 Redis 服务器的副本。关于 Redis 复制的一些事情要尽快理解。
#
#   +------------------+      +---------------+
#   |      Master      | ---> |    Replica    |
#   | (receive writes) |      |  (exact copy) |
#   +------------------+      +---------------+
#
# 1) Redis replication is asynchronous, but you can configure a master to
#    stop accepting writes if it appears to be not connected with at least
#    a given number of replicas.
# 2) Redis replicas are able to perform a partial resynchronization with the
#    master if the replication link is lost for a relatively small amount of
#    time. You may want to configure the replication backlog size (see the next
#    sections of this file) with a sensible value depending on your needs.
# 3) Replication is automatic and does not need user intervention. After a
#    network partition replicas automatically try to reconnect to masters
#    and resynchronize with them.
# 1) Redis 复制是异步的，但您可以配置一个 master 以停止接受写入，如果它似乎没有与至少给定数量的副本连接。
# 2）如果复制链接丢失相对较短的时间，Redis 副本能够与主服务器执行部分重新同步。
#    您可能希望根据您的需要使用合理的值配置复制积压大小（请参阅此文件的下一部分）。
# 3) 复制是自动的，不需要用户干预。在网络分区后，副本会自动尝试重新连接到主服务器并与它们重新同步。
#
# replicaof <masterip> <masterport>

# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the replica to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the replica request.
# 如果主服务器受密码保护（使用下面的“requirepass”配置指令），
# 则可以在开始复制同步过程之前告诉副本进行身份验证，否则主服务器将拒绝副本请求。
#
# masterauth <master-password>
#
# However this is not enough if you are using Redis ACLs (for Redis version
# 6 or greater), and the default user is not capable of running the PSYNC
# command and/or other commands needed for replication. In this case it's
# better to configure a special user to use with replication, and specify the
# masteruser configuration as such:
# 但是，如果您使用 Redis ACL（适用于 Redis 版本 6 或更高版本），
# 并且默认用户无法运行 PSYNC 命令和或复制所需的其他命令，这还不够。
# 在这种情况下，最好配置一个特殊用户来使用复制，并指定 masteruser 配置：
#
# masteruser <username>
#
# When masteruser is specified, the replica will authenticate against its
# master using the new AUTH form: AUTH <username> <password>.
# 当指定 masteruser 时，副本将使用新的 AUTH 形式对其 master 进行身份验证：AUTH <username> <password>。

# When a replica loses its connection with the master, or when the replication
# is still in progress, the replica can act in two different ways:
#
# 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will
#    still reply to client requests, possibly with out of date data, or the
#    data set may just be empty if this is the first synchronization.
#
# 2) If replica-serve-stale-data is set to 'no' the replica will reply with error
#    "MASTERDOWN Link with MASTER is down and replica-serve-stale-data is set to 'no'"
#    to all data access commands, excluding commands such as:
#    INFO, REPLICAOF, AUTH, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE,
#    UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST,
#    HOST and LATENCY.
# 当副本失去与主服务器的连接时，或者当复制仍在进行中时，副本可以以两种不同的方式进行操作：
#     1）如果副本服务陈旧数据设置为“是”（默认值）副本仍然会回复客户端请求，
#        可能带有过期数据，或者如果这是第一次同步，数据集可能只是空的。
#     2) 如果replica-serve-stale-data 设置为'no'，则replica 将对所有数据访问命令
#        回复错误“MASTERDOWN Link with MASTER is down and replica-serve-stale-data is set to 'no'”，
#        不包括以下命令：INFO、REPLICAOF、AUTH、SHUTDOWN、REPLCONF、ROLE、CONFIG、SUBSCRIBE、
#        UNSUBSCRIBE、PSUBSCRIBE、PUNSUBSCRIBE、PUBLISH、PUBSUB、COMMAND、POST、HOST 和 LATENCY。
#
replica-serve-stale-data yes

# You can configure a replica instance to accept writes or not. Writing against
# a replica instance may be useful to store some ephemeral data (because data
# written on a replica will be easily deleted after resync with the master) but
# may also cause problems if clients are writing to it because of a
# misconfiguration.
# 您可以配置副本实例以接受或不接受写入。
# 对副本实例进行写入可能有助于存储一些临时数据（因为写入副本的数据在与主实例重新同步后很容易被删除），
# 但如果客户端由于配置错误而写入副本，也可能会导致问题。
#
# Since Redis 2.6 by default replicas are read-only.
# 由于 Redis 2.6 默认副本是只读的。
#
# Note: read only replicas are not designed to be exposed to untrusted clients
# on the internet. It's just a protection layer against misuse of the instance.
# Still a read only replica exports by default all the administrative commands
# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
# security of read only replicas using 'rename-command' to shadow all the
# administrative / dangerous commands.
# 注意：只读副本不设计为暴露给互联网上不受信任的客户端。
# 它只是防止滥用实例的保护层。仍然是只读副本默认导出所有管理命令，例如 CONFIG、DEBUG 等。
# 在有限的范围内，您可以使用“重命名命令”隐藏所有管理危险命令来提高只读副本的安全性。
replica-read-only yes

# Replication SYNC strategy: disk or socket.
# 复制同步策略：磁盘或套接字。
#
# New replicas and reconnecting replicas that are not able to continue the
# replication process just receiving differences, need to do what is called a
# "full synchronization". An RDB file is transmitted from the master to the
# replicas.
# 无法继续复制过程的新副本和重新连接的副本只是接收差异，需要执行所谓的“完全同步”。
# 一个 RDB 文件从主服务器传输到副本服务器。
#
# The transmission can happen in two different ways:
#
# 1) Disk-backed: The Redis master creates a new process that writes the RDB
#                 file on disk. Later the file is transferred by the parent
#                 process to the replicas incrementally.
# 2) Diskless: The Redis master creates a new process that directly writes the
#              RDB file to replica sockets, without touching the disk at all.
# 传输可以通过两种不同的方式进行：
#     1) 磁盘支持：Redis 主服务器创建一个新进程，将 RDB 文件写入磁盘。稍后，父进程将文件增量传输到副本。
#     2）无盘：Redis master创建一个新进程，直接将RDB文件写入replica socket，完全不接触磁盘。
#
# With disk-backed replication, while the RDB file is generated, more replicas
# can be queued and served with the RDB file as soon as the current child
# producing the RDB file finishes its work. With diskless replication instead
# once the transfer starts, new replicas arriving will be queued and a new
# transfer will start when the current one terminates.
# 使用磁盘支持的复制，在生成 RDB 文件时，只要当前生成 RDB 文件的子节点完成其工作，
# 就可以将更多副本排队并与 RDB 文件一起提供服务。
# 使用无盘复制，一旦传输开始，到达的新副本将排队，当当前副本终止时将开始新的传输。
#
# When diskless replication is used, the master waits a configurable amount of
# time (in seconds) before starting the transfer in the hope that multiple
# replicas will arrive and the transfer can be parallelized.
# 当使用无盘复制时，master 在开始传输之前等待一段可配置的时间（以秒为单位），希望多个副本到达并且传输可以并行化。
#
# With slow disks and fast (large bandwidth) networks, diskless replication
# works better.
# 对于慢速磁盘和快速（大带宽）网络，无盘复制效果更好。
repl-diskless-sync yes

# When diskless replication is enabled, it is possible to configure the delay
# the server waits in order to spawn the child that transfers the RDB via socket
# to the replicas.
# 启用无盘复制后，可以配置服务器等待的延迟，以便生成通过套接字将 RDB 传输到副本的子节点。
#
# This is important since once the transfer starts, it is not possible to serve
# new replicas arriving, that will be queued for the next RDB transfer, so the
# server waits a delay in order to let more replicas arrive.
# 这一点很重要，因为一旦传输开始，就不可能为到达的新副本提供服务，
# 新副本将排队等待下一次 RDB 传输，因此服务器等待延迟以让更多副本到达。
#
# The delay is specified in seconds, and by default is 5 seconds. To disable
# it entirely just set it to 0 seconds and the transfer will start ASAP.
# 延迟以秒为单位指定，默认为 5 秒。要完全禁用它，只需将其设置为 0 秒，传输将尽快开始。
repl-diskless-sync-delay 5

# When diskless replication is enabled with a delay, it is possible to let
# the replication start before the maximum delay is reached if the maximum
# number of replicas expected have connected. Default of 0 means that the
# maximum is not defined and Redis will wait the full delay.
# 当延迟启用无盘复制时，如果预期的最大副本数已连接，则可以在达到最大延迟之前让复制开始。
# 默认为 0 表示未定义最大值，Redis 将等待完全延迟。
repl-diskless-sync-max-replicas 0

# -----------------------------------------------------------------------------
# WARNING: RDB diskless load is experimental. Since in this setup the replica
# does not immediately store an RDB on disk, it may cause data loss during
# failovers. RDB diskless load + Redis modules not handling I/O reads may also
# cause Redis to abort in case of I/O errors during the initial synchronization
# stage with the master. Use only if you know what you are doing.
# 警告：RDB 无盘负载是实验性的。由于在此设置中，副本不会立即将 RDB 存储在磁盘上，因此可能会在故障转移期间导致数据丢失。
# RDB 无盘加载 + Redis 模块不处理 IO 读取也可能导致 Redis 在与 master 的初始同步阶段发生 IO 错误时中止。
# 仅当您知道自己在做什么时才使用。
# -----------------------------------------------------------------------------
#
# Replica can load the RDB it reads from the replication link directly from the
# socket, or store the RDB to a file and read that file after it was completely
# received from the master.
# Replica 可以直接从套接字加载它从复制链接读取的 RDB，或者将 RDB 存储到文件中，并在从 master 完全接收到该文件后读取该文件。
#
# In many cases the disk is slower than the network, and storing and loading
# the RDB file may increase replication time (and even increase the master's
# Copy on Write memory and replica buffers).
# However, parsing the RDB file directly from the socket may mean that we have
# to flush the contents of the current database before the full rdb was
# received. For this reason we have the following options:
#
# "disabled"    - Don't use diskless load (store the rdb file to the disk first)
# "on-empty-db" - Use diskless load only when it is completely safe.
# "swapdb"      - Keep current db contents in RAM while parsing the data directly
#                 from the socket. Replicas in this mode can keep serving current
#                 data set while replication is in progress, except for cases where
#                 they can't recognize master as having a data set from same
#                 replication history.
#                 Note that this requires sufficient memory, if you don't have it,
#                 you risk an OOM kill.
# 在很多情况下磁盘比网络慢，存储和加载 RDB 文件可能会增加复制时间（甚至会增加 master 的 Copy on Write 内存和副本缓冲区）。
# 但是，直接从套接字解析 RDB 文件可能意味着我们必须在收到完整的 rdb 之前刷新当前数据库的内容。
# 出于这个原因，我们有以下选项：
#    “disabled”    - 不要使用无盘加载（首先将 rdb 文件存储到磁盘）
#    “on-empty-db” - 仅在完全安全时才使用无盘加载。
#    “swapdb”      - 在直接从套接字解析数据时，将当前数据库内容保留在 RAM 中。
#                    这种模式下的副本可以在复制过程中继续为当前数据集提供服务，
#                    除非它们无法将主副本识别为具有来自相同复制历史的数据集。
#                    请注意，这需要足够的内存，如果您没有它，您将面临 OOM 杀死的风险。
repl-diskless-load disabled

# Master send PINGs to its replicas in a predefined interval. It's possible to
# change this interval with the repl_ping_replica_period option. The default
# value is 10 seconds.
# Master 以预定义的时间间隔向其副本发送 PING。可以使用 repl_ping_replica_period 选项更改此间隔。默认值为 10 秒。
#
# repl-ping-replica-period 10

# The following option sets the replication timeout for:
#
# 1) Bulk transfer I/O during SYNC, from the point of view of replica.
# 2) Master timeout from the point of view of replicas (data, pings).
# 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).
#
# It is important to make sure that this value is greater than the value
# specified for repl-ping-replica-period otherwise a timeout will be detected
# every time there is low traffic between the master and the replica. The default
# value is 60 seconds.
# 以下选项设置复制超时：
#     1) 从副本的角度来看，SYNC 期间的批量传输 IO。
#     2）从副本（数据，ping）的角度来看主超时。
#     3) 从主节点的角度来看副本超时（REPLCONF ACK pings）。
#   确保此值大于为 repl-ping-replica-period 指定的值很重要，
#   否则每次主副本和副本之间的流量较低时都会检测到超时。默认值为 60 秒。
#
# repl-timeout 60

# Disable TCP_NODELAY on the replica socket after SYNC?
# SYNC 后在副本套接字上禁用 TCP_NODELAY？
#
# If you select "yes" Redis will use a smaller number of TCP packets and
# less bandwidth to send data to replicas. But this can add a delay for
# the data to appear on the replica side, up to 40 milliseconds with
# Linux kernels using a default configuration.
# 如果选择“yes”，Redis 将使用较少数量的 TCP 数据包和较少的带宽将数据发送到副本。
# 但这可能会增加数据出现在副本端的延迟，对于使用默认配置的 Linux 内核，最多会延迟 40 毫秒。
#
# If you select "no" the delay for data to appear on the replica side will
# be reduced but more bandwidth will be used for replication.
# 如果您选择“否”，则数据出现在副本端的延迟将减少，但将使用更多带宽进行复制。
#
# By default we optimize for low latency, but in very high traffic conditions
# or when the master and replicas are many hops away, turning this to "yes" may
# be a good idea.
# 默认情况下，我们会针对低延迟进行优化，但在非常高的流量条件下或当主节点和副本节点相距很多跳时，将其设置为“是”可能是个好主意。
repl-disable-tcp-nodelay no

# Set the replication backlog size. The backlog is a buffer that accumulates
# replica data when replicas are disconnected for some time, so that when a
# replica wants to reconnect again, often a full resync is not needed, but a
# partial resync is enough, just passing the portion of data the replica
# missed while disconnected.
# 设置复制积压大小。 backlog是一个缓冲区，当replica断线一段时间后，会累积replica数据，
# 这样当replica想要重新连接时，通常不需要full resync，但是partial resync就足够了，
# 只需将部分数据传递给replica断开连接时错过了。
#
# The bigger the replication backlog, the longer the replica can endure the
# disconnect and later be able to perform a partial resynchronization.
# 复制积压越大，副本可以承受断开连接的时间越长，以后能够执行部分重新同步。
#
# The backlog is only allocated if there is at least one replica connected.
# 仅当至少连接一个副本时才分配积压。
#
# repl-backlog-size 1mb

# After a master has no connected replicas for some time, the backlog will be
# freed. The following option configures the amount of seconds that need to
# elapse, starting from the time the last replica disconnected, for the backlog
# buffer to be freed.
# 一段时间后，master 没有连接的副本，积压将被释放。
# 以下选项配置需要经过的秒数，从最后一个副本断开连接的时间开始，以便释放积压缓冲区。
#
# Note that replicas never free the backlog for timeout, since they may be
# promoted to masters later, and should be able to correctly "partially
# resynchronize" with other replicas: hence they should always accumulate backlog.
# 请注意，副本永远不会因超时而释放积压，因为它们可能会在以后被提升为主副本，
# 并且应该能够正确地与其他副本“部分重新同步”：因此它们应该始终累积积压。
#
# A value of 0 means to never release the backlog.
# 值 0 表示从不释放积压。
#
# repl-backlog-ttl 3600

# The replica priority is an integer number published by Redis in the INFO
# output. It is used by Redis Sentinel in order to select a replica to promote
# into a master if the master is no longer working correctly.
# 副本优先级是 Redis 在 INFO 输出中发布的整数。
#  Redis Sentinel 使用它来选择一个副本以在 master 不再正常工作时提升为 master。
#
# A replica with a low priority number is considered better for promotion, so
# for instance if there are three replicas with priority 10, 100, 25 Sentinel
# will pick the one with priority 10, that is the lowest.
# 优先级较低的副本被认为更适合提升，例如，如果有三个副本的优先级为 10、100、25，
# Sentinel 将选择优先级为 10 的副本，即最低的副本。
#
# However a special priority of 0 marks the replica as not able to perform the
# role of master, so a replica with priority of 0 will never be selected by
# Redis Sentinel for promotion.
# 但是，特殊优先级 0 将副本标记为无法执行 master 角色，因此 Redis Sentinel 永远不会选择优先级为 0 的副本进行升级。
#
# By default the priority is 100.
# 默认情况下，优先级为 100。
replica-priority 100

# The propagation error behavior controls how Redis will behave when it is
# unable to handle a command being processed in the replication stream from a master
# or processed while reading from an AOF file. Errors that occur during propagation
# are unexpected, and can cause data inconsistency. However, there are edge cases
# in earlier versions of Redis where it was possible for the server to replicate or persist
# commands that would fail on future versions. For this reason the default behavior
# is to ignore such errors and continue processing commands.
# 传播错误行为控制 Redis 在无法处理来自 master 的复制流中正在处理的命令或在从 AOF 文件读取时处理的命令时的行为。
# 传播过程中发生的错误是意料之外的，并且可能导致数据不一致。
# 但是，在早期版本的 Redis 中存在边缘情况，服务器可以复制或保留在未来版本上会失败的命令。
# 因此，默认行为是忽略此类错误并继续处理命令。
#
# If an application wants to ensure there is no data divergence, this configuration
# should be set to 'panic' instead. The value can also be set to 'panic-on-replicas'
# to only panic when a replica encounters an error on the replication stream. One of
# these two panic values will become the default value in the future once there are
# sufficient safety mechanisms in place to prevent false positive crashes.
# 如果应用程序想要确保没有数据分歧，则应将此配置设置为“panic”。
# 该值也可以设置为 'panic-on-replicas' 以仅在副本在复制流上遇到错误时出现恐慌。
# 一旦有足够的安全机制来防止误报崩溃，这两个恐慌值之一将在未来成为默认值。
#
# propagation-error-behavior ignore

# Replica ignore disk write errors controls the behavior of a replica when it is
# unable to persist a write command received from its master to disk. By default,
# this configuration is set to 'no' and will crash the replica in this condition.
# It is not recommended to change this default, however in order to be compatible
# with older versions of Redis this config can be toggled to 'yes' which will just
# log a warning and execute the write command it got from the master.
# 副本忽略磁盘写入错误控制副本在无法将从其主服务器接收到的写入命令持久保存到磁盘时的行为。
# 默认情况下，此配置设置为“否”，并且会在这种情况下使副本崩溃。
# 不建议更改此默认值，但是为了与旧版本的 Redis 兼容，可以将此配置切换为“是”，
# 这将仅记录警告并执行从主服务器获得的写入命令。
#
# replica-ignore-disk-write-errors no

# -----------------------------------------------------------------------------
# By default, Redis Sentinel includes all replicas in its reports. A replica
# can be excluded from Redis Sentinel's announcements. An unannounced replica
# will be ignored by the 'sentinel replicas <master>' command and won't be
# exposed to Redis Sentinel's clients.
# 默认情况下，Redis Sentinel 在其报告中包含所有副本。副本可以从 Redis Sentinel 的公告中排除。
#  'sentinel replicas <master>' 命令将忽略未通知的副本，并且不会向 Redis Sentinel 的客户端公开。
#
# This option does not change the behavior of replica-priority. Even with
# replica-announced set to 'no', the replica can be promoted to master. To
# prevent this behavior, set replica-priority to 0.
# 此选项不会更改副本优先级的行为。即使将replica-anounced 设置为“no”，也可以将replica 提升为master。
# 要防止这种行为，请将副本优先级设置为 0。
#
# replica-announced yes

# It is possible for a master to stop accepting writes if there are less than
# N replicas connected, having a lag less or equal than M seconds.
# 如果连接的副本少于 N 个，并且延迟小于或等于 M 秒，则 master 可能会停止接受写入。
#
# The N replicas need to be in "online" state.
# N 个副本需要处于“在线”状态。
#
# The lag in seconds, that must be <= the specified value, is calculated from
# the last ping received from the replica, that is usually sent every second.
# 延迟以秒为单位，必须 <= 指定值，是根据从副本收到的最后一次 ping 计算的，通常每秒发送一次。
#
# This option does not GUARANTEE that N replicas will accept the write, but
# will limit the window of exposure for lost writes in case not enough replicas
# are available, to the specified number of seconds.
# 此选项不保证 N 个副本将接受写入，但将在没有足够副本可用的情况下将丢失写入的暴露窗口限制为指定的秒数。
#
# For example to require at least 3 replicas with a lag <= 10 seconds use:
# 例如，需要至少 3 个延迟 <= 10 秒的副本，请使用：
#
# min-replicas-to-write 3
# min-replicas-max-lag 10
#
# Setting one or the other to 0 disables the feature.
# 将其中一个或另一个设置为 0 会禁用该功能。
#
# By default min-replicas-to-write is set to 0 (feature disabled) and
# min-replicas-max-lag is set to 10.
# 默认情况下，min-replicas-to-write 设置为 0（禁用功能），min-replicas-max-lag 设置为 10。

# A Redis master is able to list the address and port of the attached
# replicas in different ways. For example the "INFO replication" section
# offers this information, which is used, among other tools, by
# Redis Sentinel in order to discover replica instances.
# Another place where this info is available is in the output of the
# "ROLE" command of a master.
# Redis master 能够以不同的方式列出附加副本的地址和端口。
# 例如，“INFO 复制”部分提供了此信息，Redis Sentinel 使用这些信息以及其他工具来发现副本实例。
# 该信息可用的另一个地方是主控的“ROLE”命令的输出。
#
# The listed IP address and port normally reported by a replica is
# obtained in the following way:
#
#   IP: The address is auto detected by checking the peer address
#   of the socket used by the replica to connect with the master.
#
#   Port: The port is communicated by the replica during the replication
#   handshake, and is normally the port that the replica is using to
#   listen for connections.
# 列出的副本通常报告的IP地址和端口通过以下方式获得：
#   IP：通过检查副本用于连接主服务器的套接字的对等地址来自动检测该地址。
#   port：该端口在复制握手期间由副本通信，通常是副本用于侦听连接的端口。
#
# However when port forwarding or Network Address Translation (NAT) is
# used, the replica may actually be reachable via different IP and port
# pairs. The following two options can be used by a replica in order to
# report to its master a specific set of IP and port, so that both INFO
# and ROLE will report those values.
# 但是，当使用端口转发或网络地址转换 (NAT) 时，副本实际上可以通过不同的 IP 和端口对访问。
# 副本可以使用以下两个选项来向其主控报告一组特定的 IP 和端口，以便 INFO 和 ROLE 都将报告这些值。
#
# There is no need to use both the options if you need to override just
# the port or the IP address.
# 如果您只需要覆盖端口或 IP 地址，则无需同时使用这两个选项。
#
# replica-announce-ip 5.5.5.5
# replica-announce-port 1234

############################### KEYS TRACKING #################################

# Redis implements server assisted support for client side caching of values.
# This is implemented using an invalidation table that remembers, using
# a radix key indexed by key name, what clients have which keys. In turn
# this is used in order to send invalidation messages to clients. Please
# check this page to understand more about the feature:
# Redis 实现了对客户端值缓存的服务器辅助支持。
# 这是使用一个失效表来实现的，该表使用一个由键名索引的基键来记住哪些客户端拥有哪些键。
# 反过来，这用于向客户端发送无效消息。请查看此页面以了解有关该功能的更多信息：
#
#   https://redis.io/topics/client-side-caching
#
# When tracking is enabled for a client, all the read only queries are assumed
# to be cached: this will force Redis to store information in the invalidation
# table. When keys are modified, such information is flushed away, and
# invalidation messages are sent to the clients. However if the workload is
# heavily dominated by reads, Redis could use more and more memory in order
# to track the keys fetched by many clients.
# 当为客户端启用跟踪时，假定所有只读查询都被缓存：这将强制 Redis 将信息存储在失效表中。
# 当密钥被修改时，这些信息会被清除，并且失效消息会发送给客户端。
# 但是，如果工作负载主要由读取主导，Redis 可能会使用越来越多的内存来跟踪许多客户端获取的密钥。
#
# For this reason it is possible to configure a maximum fill value for the
# invalidation table. By default it is set to 1M of keys, and once this limit
# is reached, Redis will start to evict keys in the invalidation table
# even if they were not modified, just to reclaim memory: this will in turn
# force the clients to invalidate the cached values. Basically the table
# maximum size is a trade off between the memory you want to spend server
# side to track information about who cached what, and the ability of clients
# to retain cached objects in memory.
# 因此，可以为失效表配置最大填充值。默认情况下，它设置为 1M 的键，一旦达到这个限制，
# Redis 将开始驱逐失效表中的键，即使它们没有被修改，只是为了回收内存：这反过来会迫使客户端使缓存失效值。
# 基本上，表最大大小是您希望在服务器端跟踪有关谁缓存了什么信息的内存与客户端在内存中保留缓存对象的能力之间的权衡。
#
# If you set the value to 0, it means there are no limits, and Redis will
# retain as many keys as needed in the invalidation table.
# In the "stats" INFO section, you can find information about the number of
# keys in the invalidation table at every given moment.
# 如果将该值设置为 0，则表示没有限制，Redis 将在失效表中保留所需数量的键。
# 在“统计信息”部分，您可以找到有关失效表中每个给定时刻的键数的信息。
#
# Note: when key tracking is used in broadcasting mode, no memory is used
# in the server side so this setting is useless.
# 注意：在广播模式下使用key tracking时，服务器端不使用内存，所以这个设置是没有用的。
#
# tracking-table-max-keys 1000000

################################## SECURITY ###################################

# Warning: since Redis is pretty fast, an outside user can try up to
# 1 million passwords per second against a modern box. This means that you
# should use very strong passwords, otherwise they will be very easy to break.
# Note that because the password is really a shared secret between the client
# and the server, and should not be memorized by any human, the password
# can be easily a long string from /dev/urandom or whatever, so by using a
# long and unguessable password no brute force attack will be possible.
# 警告：由于 Redis 速度非常快，外部用户每秒最多可以尝试对现代机器输入 100 万个密码。
# 这意味着您应该使用非常强大的密码，否则它们将很容易被破解。
# 请注意，由于密码实际上是客户端和服务器之间的共享机密，并且不应被任何人记住，
# 因此密码很容易是来自 devurandom 或其他任何内容的长字符串，因此使用长且不可猜测的密码不会暴力破解攻击将是可能的。

# Redis ACL users are defined in the following format:
# Redis ACL 用户的定义格式如下：
#
#   user <username> ... acl rules ...
#
# For example:
#
#   user worker +@list +@connection ~jobs:* on >ffa9203c493aa99
#
# The special username "default" is used for new connections. If this user
# has the "nopass" rule, then new connections will be immediately authenticated
# as the "default" user without the need of any password provided via the
# AUTH command. Otherwise if the "default" user is not flagged with "nopass"
# the connections will start in not authenticated state, and will require
# AUTH (or the HELLO command AUTH option) in order to be authenticated and
# start to work.
# 特殊用户名“default”用于新连接。如果此用户具有“nopass”规则，则新连接将立即作为“默认”用户进行身份验证，
# 而无需通过 AUTH 命令提供任何密码。否则，如果“默认”用户未标记为“nopass”，则连接将以未验证状态开始，
# 并且需要 AUTH（或 HELLO 命令 AUTH 选项）才能进行验证并开始工作。
#
# The ACL rules that describe what a user can do are the following:
# 描述用户可以做什么的 ACL 规则如下：
#
#  on           Enable the user: it is possible to authenticate as this user. 启用用户：可以作为该用户进行身份验证。
#  off          Disable the user: it's no longer possible to authenticate
#               with this user, however the already authenticated connections
#               will still work.
#               禁用用户：无法再通过此用户进行身份验证，但已通过身份验证的连接仍然有效。
#  skip-sanitize-payload    RESTORE dump-payload sanitization is skipped. RESTORE 转储-有效负载清理被跳过。
#  sanitize-payload         RESTORE dump-payload is sanitized (default).  RESTORE 转储有效负载已清理（默认）。
#  +<command>   Allow the execution of that command.
#               May be used with `|` for allowing subcommands (e.g "+config|get")
#               允许执行该命令。可以与 `|` 一起使用以允许子命令（例如“+config|get”）
#  -<command>   Disallow the execution of that command.
#               May be used with `|` for blocking subcommands (e.g "-config|set")
#               禁止执行该命令。可以与 `|` 一起使用来阻止子命令（例如“-config|set”）
#  +@<category> Allow the execution of all the commands in such category
#               with valid categories are like @admin, @set, @sortedset, ...
#               and so forth, see the full list in the server.c file where
#               the Redis command table is described and defined.
#               The special category @all means all the commands, but currently
#               present in the server, and that will be loaded in the future
#               via modules.
#               允许执行具有有效类别的此类类别中的所有命令，例如@admin、@set、@sortedset...等等，
#               请参阅 server.c 文件中的完整列表，其中描述和定义了 Redis 命令表.特殊类别@all 表示所有命令，
#               但当前存在于服务器中，并且将来会通过模块加载。
#  +<command>|first-arg  Allow a specific first argument of an otherwise
#                        disabled command. It is only supported on commands with
#                        no sub-commands, and is not allowed as negative form
#                        like -SELECT|1, only additive starting with "+". This
#                        feature is deprecated and may be removed in the future.
#                        允许其他禁用命令的特定第一个参数。它仅在没有子命令的命令上受支持，
#                        并且不允许像 -SELECT|1 这样的否定形式，只能以“+”开头的加法。
#                        此功能已弃用，将来可能会被删除。
#  allcommands  Alias for +@all. Note that it implies the ability to execute
#               all the future commands loaded via the modules system.
#               +@all 的别名。请注意，这意味着能够执行通过模块系统加载的所有未来命令。
#  nocommands   Alias for -@all. -@all 的别名。
#  ~<pattern>   Add a pattern of keys that can be mentioned as part of
#               commands. For instance ~* allows all the keys. The pattern
#               is a glob-style pattern like the one of KEYS.
#               It is possible to specify multiple patterns.
#               添加可以作为命令的一部分提及的键模式。例如 ~ 允许所有键。
#               该模式是一种类似于 KEYS 的 glob 样式模式。可以指定多个模式。
# %R~<pattern>  Add key read pattern that specifies which keys can be read from.
#               添加键读取模式，指定可以读取哪些键。
# %W~<pattern>  Add key write pattern that specifies which keys can be written to.
#               添加键写入模式，指定可以写入哪些键。
#  allkeys      Alias for ~*
#  resetkeys    Flush the list of allowed keys patterns. 刷新允许的键模式列表。
#  &<pattern>   Add a glob-style pattern of Pub/Sub channels that can be
#               accessed by the user. It is possible to specify multiple channel patterns.
#               添加用户可以访问的全局样式的 PubSub 频道模式。可以指定多个通道模式。
#  allchannels  Alias for &*
#  resetchannels    Flush the list of allowed channel patterns.
#                   刷新允许的频道模式列表。
#  ><password>  Add this password to the list of valid password for the user.
#               For example >mypass will add "mypass" to the list.
#               This directive clears the "nopass" flag (see later).
#               将此密码添加到用户的有效密码列表中。例如 >mypass 会将“mypass”添加到列表中。
#               该指令清除“nopass”标志（见下文）。
#  <<password>  Remove this password from the list of valid passwords.
#               从有效密码列表中删除此密码。
#  nopass       All the set passwords of the user are removed, and the user
#               is flagged as requiring no password: it means that every
#               password will work against this user. If this directive is
#               used for the default user, every new connection will be
#               immediately authenticated with the default user without
#               any explicit AUTH command required. Note that the "resetpass"
#               directive will clear this condition.
#               该用户设置的所有密码都被删除，并且该用户被标记为不需要密码：这意味着每个密码都对该用户有效。
#               如果此指令用于默认用户，则每个新连接都将立即使用默认用户进行身份验证，而无需任何显式 AUTH 命令。
#               请注意，“resetpass”指令将清除此条件。
#  resetpass    Flush the list of allowed passwords. Moreover removes the
#               "nopass" status. After "resetpass" the user has no associated
#               passwords and there is no way to authenticate without adding
#               some password (or setting it as "nopass" later).
#               刷新允许的密码列表。此外删除“nopass”状态。在“resetpass”之后，用户没有关联的密码，
#               并且如果不添加一些密码（或稍后将其设置为“nopass”）就无法进行身份验证。
#  reset        Performs the following actions: resetpass, resetkeys, off,
#               -@all. The user returns to the same state it has immediately
#               after its creation.
#               执行以下操作：resetpass、resetkeys、off、-@all。用户在创建后立即返回到相同的状态。
# (<options>)   Create a new selector with the options specified within the
#               parentheses and attach it to the user. Each option should be 
#               space separated. The first character must be ( and the last 
#               character must be ).
#               使用括号中指定的选项创建一个新选择器并将其附加给用户。每个选项都应该用空格分隔。
#               第一个字符必须是 ( 并且最后一个字符必须是 )。
# clearselectors    Remove all of the currently attached selectors.
#                   Note this does not change the "root" user permissions,
#                   which are the permissions directly applied onto the
#                   user (outside the parentheses).
#                   删除所有当前附加的选择器。
#                   请注意，这不会更改“root”用户权限，这是直接应用于用户的权限（括号外）。
#

# ACL rules can be specified in any order: for instance you can start with
# passwords, then flags, or key patterns. However note that the additive
# and subtractive rules will CHANGE MEANING depending on the ordering.
# For instance see the following example:
# ACL 规则可以按任何顺序指定：例如，您可以从密码开始，然后是标志或密钥模式。
# 但是请注意，加法和减法规则将根据顺序改变含义。例如看下面的例子：
#
#   user alice on +@all -DEBUG ~* >somepassword
#
# This will allow "alice" to use all the commands with the exception of the
# DEBUG command, since +@all added all the commands to the set of the commands
# alice can use, and later DEBUG was removed. However if we invert the order
# of two ACL rules the result will be different:
# 这将允许“alice”使用除 DEBUG 命令之外的所有命令，因为 +@all 将所有命令添加到 alice 可以使用的命令集中，
# 并且后来删除了 DEBUG。但是，如果我们颠倒两个 ACL 规则的顺序，结果会有所不同：
#
#   user alice on -DEBUG +@all ~* >somepassword
#
# Now DEBUG was removed when alice had yet no commands in the set of allowed
# commands, later all the commands are added, so the user will be able to
# execute everything.
# 现在，当 alice 在允许的命令集中还没有命令时，删除了 DEBUG，稍后将添加所有命令，因此用户将能够执行所有操作。
#
# Basically ACL rules are processed left-to-right.
# 基本上 ACL 规则是从左到右处理的。
#
# The following is a list of command categories and their meanings:
# 以下是命令类别及其含义的列表：
# * keyspace - Writing or reading from keys, databases, or their metadata 
#     in a type agnostic way. Includes DEL, RESTORE, DUMP, RENAME, EXISTS, DBSIZE,
#     KEYS, EXPIRE, TTL, FLUSHALL, etc. Commands that may modify the keyspace,
#     key or metadata will also have `write` category. Commands that only read
#     the keyspace, key or metadata will have the `read` category.
#     以与类型无关的方式写入或读取密钥、数据库或其元数据。
#     包括 DEL、RESTORE、DUMP、RENAME、EXISTS、DBSIZE、KEYS、EXPIRE、TTL、FLUSHALL 等。
#     可能修改键空间、键或元数据的命令也将具有“写入”类别。仅读取键空间、键或元数据的命令将具有“读取”类别。
# * read - Reading from keys (values or metadata). Note that commands that don't
#     interact with keys, will not have either `read` or `write`.
#     从键（值或元数据）中读取。请注意，不与键交互的命令不会有 `read` 或 `write`。
# * write - Writing to keys (values or metadata) 写入键（值或元数据）
# * admin - Administrative commands. Normal applications will never need to use
#     these. Includes REPLICAOF, CONFIG, DEBUG, SAVE, MONITOR, ACL, SHUTDOWN, etc.
#     行政命令。普通应用程序永远不需要使用这些。包括REPLICAOF、CONFIG、DEBUG、SAVE、MONITOR、ACL、SHUTDOWN等。
# * dangerous - Potentially dangerous (each should be considered with care for
#     various reasons). This includes FLUSHALL, MIGRATE, RESTORE, SORT, KEYS,
#     CLIENT, DEBUG, INFO, CONFIG, SAVE, REPLICAOF, etc.
#     潜在危险（出于各种原因，应谨慎考虑每一个）。
#     这包括 FLUSHALL、MIGRATE、RESTORE、SORT、KEYS、CLIENT、DEBUG、INFO、CONFIG、SAVE、REPLICAOF 等。
# * connection - Commands affecting the connection or other connections.
#     This includes AUTH, SELECT, COMMAND, CLIENT, ECHO, PING, etc.
#     影响连接或其他连接的命令。这包括 AUTH、SELECT、COMMAND、CLIENT、ECHO、PING 等。
# * blocking - Potentially blocking the connection until released by another command.
#              可能会阻塞连接，直到被另一个命令释放。
# * fast - Fast O(1) commands. May loop on the number of arguments, but not the number of elements in the key.
#          快速 O(1) 命令。可以循环参数的数量，而不是键中的元素数量。
# * slow - All commands that are not Fast. 所有不是快速的命令。
# * pubsub - PUBLISH / SUBSCRIBE related
# * transaction - WATCH / MULTI / EXEC related commands.
# * scripting - Scripting related.
# * set - Data type: sets related.
# * sortedset - Data type: zsets related.
# * list - Data type: lists related.
# * hash - Data type: hashes related.
# * string - Data type: strings related.
# * bitmap - Data type: bitmaps related.
# * hyperloglog - Data type: hyperloglog related.
# * geo - Data type: geo related.
# * stream - Data type: streams related.
#
# For more information about ACL configuration please refer to
# the Redis web site at https://redis.io/topics/acl
# 有关 ACL 配置的更多信息，请参阅 Redis 网站 https:redis.io/topics/acl

# ACL LOG
#
# The ACL Log tracks failed commands and authentication events associated
# with ACLs. The ACL Log is useful to troubleshoot failed commands blocked
# by ACLs. The ACL Log is stored in memory. You can reclaim memory with
# ACL LOG RESET. Define the maximum entry length of the ACL Log below.
# ACL 日志跟踪与 ACL 关联的失败命令和身份验证事件。 ACL 日志可用于对 ACL 阻止的失败命令进行故障排除。
# ACL 日志存储在内存中。您可以使用 ACL LOG RESET 回收内存。在下面定义 ACL 日志的最大条目长度。
acllog-max-len 128

# Using an external ACL file
# 使用外部 ACL 文件
#
# Instead of configuring users here in this file, it is possible to use
# a stand-alone file just listing users. The two methods cannot be mixed:
# if you configure users here and at the same time you activate the external
# ACL file, the server will refuse to start.
# 可以使用仅列出用户的独立文件，而不是在此文件中配置用户。
# 两种方式不能混用：如果在这里配置用户，同时激活外部ACL文件，服务器会拒绝启动。
#
# The format of the external ACL user file is exactly the same as the
# format that is used inside redis.conf to describe users.
# 外部 ACL 用户文件的格式与 redis.conf 中用于描述用户的格式完全相同。
#
# aclfile /etc/redis/users.acl

# IMPORTANT NOTE: starting with Redis 6 "requirepass" is just a compatibility
# layer on top of the new ACL system. The option effect will be just setting
# the password for the default user. Clients will still authenticate using
# AUTH <password> as usually, or more explicitly with AUTH default <password>
# if they follow the new protocol: both will work.
# 重要提示：从 Redis 6 开始，“requirepass”只是新 ACL 系统之上的一个兼容层。
# 选项效果将只是为默认用户设置密码。客户端仍然会像往常一样使用 AUTH <password> 进行身份验证，
# 或者更明确地使用 AUTH default <password> 如果他们遵循新协议：两者都可以工作。
#
# The requirepass is not compatible with aclfile option and the ACL LOAD
# command, these will cause requirepass to be ignored.
# requirepass 与 aclfile 选项和 ACL LOAD 命令不兼容，这些将导致 requirepass 被忽略。
#
# requirepass foobared

# New users are initialized with restrictive permissions by default, via the
# equivalent of this ACL rule 'off resetkeys -@all'. Starting with Redis 6.2, it
# is possible to manage access to Pub/Sub channels with ACL rules as well. The
# default Pub/Sub channels permission if new users is controlled by the
# acl-pubsub-default configuration directive, which accepts one of these values:
# 默认情况下，新用户通过与此 ACL 规则“off resetkeys -@all”等效的限制性权限进行初始化。
# 从 Redis 6.2 开始，还可以使用 ACL 规则管理对 PubSub 通道的访问。
# 如果新用户由 acl-pubsub-default 配置指令控制，则默认 PubSub 频道权限，该指令接受以下值之一：
#
# allchannels: grants access to all Pub/Sub channels 授予对所有 PubSub 频道的访问权限
# resetchannels: revokes access to all Pub/Sub channels 撤销对所有 PubSub 频道的访问权限
#
# From Redis 7.0, acl-pubsub-default defaults to 'resetchannels' permission.
# 从 Redis 7.0 开始，acl-pubsub-default 默认为“resetchannels”权限。
#
# acl-pubsub-default resetchannels

# Command renaming (DEPRECATED). 命令重命名（已弃用）。
#
# ------------------------------------------------------------------------
# WARNING: avoid using this option if possible. Instead use ACLs to remove
# commands from the default user, and put them only in some admin user you
# create for administrative purposes.
# 警告：尽可能避免使用此选项。而是使用 ACL 从默认用户中删除命令，并将它们仅放在您为管理目的而创建的某些管理员用户中。
# ------------------------------------------------------------------------
#
# It is possible to change the name of dangerous commands in a shared
# environment. For instance the CONFIG command may be renamed into something
# hard to guess so that it will still be available for internal-use tools
# but not available for general clients.
# 可以在共享环境中更改危险命令的名称。
# 例如，CONFIG 命令可能被重命名为难以猜测的名称，这样它仍然可用于内部使用的工具，但不适用于一般客户端。
#
# Example:
#
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# It is also possible to completely kill a command by renaming it into
# an empty string:
# 也可以通过将命令重命名为空字符串来完全终止命令：
#
# rename-command CONFIG ""
#
# Please note that changing the name of commands that are logged into the
# AOF file or transmitted to replicas may cause problems.
# 请注意，更改登录到 AOF 文件或传输到副本的命令的名称可能会导致问题。

################################### CLIENTS ####################################

# Set the max number of connected clients at the same time. By default
# this limit is set to 10000 clients, however if the Redis server is not
# able to configure the process file limit to allow for the specified limit
# the max number of allowed clients is set to the current file limit
# minus 32 (as Redis reserves a few file descriptors for internal uses).
# 设置同时连接的最大客户端数。默认情况下，此限制设置为 10000 个客户端，
# 但是如果 Redis 服务器无法配置进程文件限制以允许指定的限制，则允许的最大客户端数设置为当前文件限制 - 32
# （因为 Redis 保留了一个很少有内部使用的文件描述符）。
#
# Once the limit is reached Redis will close all the new connections sending
# an error 'max number of clients reached'.
# 一旦达到限制，Redis 将关闭所有新连接，并发送错误“达到最大客户端数”。
#
# IMPORTANT: When Redis Cluster is used, the max number of connections is also
# shared with the cluster bus: every node in the cluster will use two
# connections, one incoming and another outgoing. It is important to size the
# limit accordingly in case of very large clusters.
# 重要提示：使用 Redis Cluster 时，最大连接数也与集群总线共享：集群中的每个节点将使用两个连接，一个传入，另一个传出。
# 在非常大的集群的情况下，相应地调整限制大小是很重要的。
#
# maxclients 10000

############################## MEMORY MANAGEMENT ################################

# Set a memory usage limit to the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
# 将内存使用限制设置为指定的字节数。当达到内存限制时，Redis 将尝试根据选择的驱逐策略删除键（参见 maxmemory-policy）。
#
# If Redis can't remove keys according to the policy, or if the policy is
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
# 如果 Redis 无法根据策略删除键，或者如果策略设置为“noeviction”，
# Redis 将开始以错误回复会使用更多内存的命令，如 SET、LPUSH 等，并将继续回复只读命令，如 GET。
#
# This option is usually useful when using Redis as an LRU or LFU cache, or to
# set a hard memory limit for an instance (using the 'noeviction' policy).
# 当使用 Redis 作为 LRU 或 LFU 缓存或为实例设置硬内存限制（使用“noeviction”策略）时，此选项通常很有用。
#
# WARNING: If you have replicas attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the replicas are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of replicas is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
# 警告：如果您将副本附加到启用了 maxmemory 的实例，则从使用的内存计数中减去提供副本所需的输出缓冲区的大小，
# 因此网络问题重新同步不会触发键被驱逐的循环，并且在打开副本的输出缓冲区已满，
# 删除键的 DEL 触发删除更多键，依此类推，直到数据库完全清空。
#
# In short... if you have replicas attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for replica
# output buffers (but this is not needed if the policy is 'noeviction').
# 简而言之...如果您附加了副本，建议您为 maxmemory 设置一个下限，以便系统上有一些空闲 RAM 用于副本输出缓冲区
# （但如果策略是“noeviction”，则不需要这样做）。
#
# maxmemory <bytes>

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select one from the following behaviors:
# MAXMEMORY POLICY：当达到 maxmemory 时，Redis 将如何选择要删除的内容。您可以从以下行为中选择一种：
#
# volatile-lru -> Evict using approximated LRU, only keys with an expire set.使用近似的 LRU 驱逐，只有带有过期集的键。
# allkeys-lru -> Evict any key using approximated LRU. 使用近似的 LRU 驱逐任何密钥。
# volatile-lfu -> Evict using approximated LFU, only keys with an expire set.使用近似的 LFU 驱逐，只有带有过期集的键。
# allkeys-lfu -> Evict any key using approximated LFU.使用近似的 LFU 驱逐任何密钥。
# volatile-random -> Remove a random key having an expire set.删除具有过期设置的随机密钥。
# allkeys-random -> Remove a random key, any key.删除随机密钥，任何密钥。
# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)删除过期时间最近的密钥（次要 TTL）
# noeviction -> Don't evict anything, just return an error on write operations.不要驱逐任何东西，只是在写操作时返回一个错误。
#
# LRU means Least Recently Used LRU 表示最近最少使用
# LFU means Least Frequently Used LFU 表示最不常用
#
# Both LRU, LFU and volatile-ttl are implemented using approximated
# randomized algorithms.
# LRU、LFU 和 volatile-ttl 都是使用近似随机算法实现的。
#
# Note: with any of the above policies, when there are no suitable keys for
# eviction, Redis will return an error on write operations that require
# more memory. These are usually commands that create new keys, add data or
# modify existing keys. A few examples are: SET, INCR, HSET, LPUSH, SUNIONSTORE,
# SORT (due to the STORE argument), and EXEC (if the transaction includes any
# command that requires memory).
# 注意：使用上述任何一种策略，当没有合适的键用于驱逐时，Redis 将在需要更多内存的写入操作时返回错误。
# 这些通常是创建新密钥、添加数据或修改现有密钥的命令。
# 一些示例是：SET、INCR、HSET、LPUSH、SUNIONSTORE、SORT（由于 STORE 参数）和 EXEC（如果事务包括任何需要内存的命令）。
#
# The default is:
#
# maxmemory-policy noeviction

# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated
# algorithms (in order to save memory), so you can tune it for speed or
# accuracy. By default Redis will check five keys and pick the one that was
# used least recently, you can change the sample size using the following
# configuration directive.
# LRU、LFU 和最小 TTL 算法不是精确算法，而是近似算法（为了节省内存），因此您可以对其进行调整以提高速度或准确性。
# 默认情况下，Redis 将检查五个键并选择最近最少使用的一个，您可以使用以下配置指令更改样本大小。
#
# The default of 5 produces good enough results. 10 Approximates very closely
# true LRU but costs more CPU. 3 is faster but not very accurate.
# 默认值 5 会产生足够好的结果。 10 非常接近真实的 LRU，但 CPU 成本更高。 3更快但不是很准确。
#
# maxmemory-samples 5

# Eviction processing is designed to function well with the default setting.
# If there is an unusually large amount of write traffic, this value may need to
# be increased.  Decreasing this value may reduce latency at the risk of
# eviction processing effectiveness
#   0 = minimum latency, 10 = default, 100 = process without regard to latency
# 逐出处理旨在在默认设置下正常运行。如果写入流量异常大，则可能需要增加此值。
# 减小此值可能会降低延迟，但有驱逐处理有效性的风险
#  0 = 最小延迟，10 = 默认，100 = 不考虑延迟的进程
#
# maxmemory-eviction-tenacity 10

# Starting from Redis 5, by default a replica will ignore its maxmemory setting
# (unless it is promoted to master after a failover or manually). It means
# that the eviction of keys will be just handled by the master, sending the
# DEL commands to the replica as keys evict in the master side.
# 从 Redis 5 开始，默认情况下，副本将忽略其 maxmemory 设置（除非在故障转移或手动将其提升为 master）。
# 这意味着键的逐出将仅由主控处理，将 DEL 命令发送到副本作为主控端的键逐出。
#
# This behavior ensures that masters and replicas stay consistent, and is usually
# what you want, however if your replica is writable, or you want the replica
# to have a different memory setting, and you are sure all the writes performed
# to the replica are idempotent, then you may change this default (but be sure
# to understand what you are doing).
# 这种行为确保主服务器和副本保持一致，并且通常是您想要的，但是如果您的副本是可写的，
# 或者您希望副本具有不同的内存设置，并且您确定对副本执行的所有写入都是幂等的，
# 那么您可以更改此默认值（但请务必了解您在做什么）。
#
# Note that since the replica by default does not evict, it may end using more
# memory than the one set via maxmemory (there are certain buffers that may
# be larger on the replica, or data structures may sometimes take more memory
# and so forth). So make sure you monitor your replicas and make sure they
# have enough memory to never hit a real out-of-memory condition before the
# master hits the configured maxmemory setting.
# 请注意，由于默认情况下副本不会驱逐，因此它可能最终使用比通过 maxmemory 设置的内存更多的内存
# （副本上的某些缓冲区可能更大，或者数据结构有时可能会占用更多内存等等）。
# 因此，请确保您监控您的副本，并确保它们有足够的内存，在主服务器达到配置的 maxmemory 设置之前永远不会遇到真正的内存不足情况。
#
# replica-ignore-maxmemory yes

# Redis reclaims expired keys in two ways: upon access when those keys are
# found to be expired, and also in background, in what is called the
# "active expire key". The key space is slowly and interactively scanned
# looking for expired keys to reclaim, so that it is possible to free memory
# of keys that are expired and will never be accessed again in a short time.
# Redis 以两种方式回收过期的密钥：在发现这些密钥过期时访问时，以及在后台，在所谓的“活动过期密钥”中。
# 密钥空间被缓慢且交互地扫描以寻找过期密钥以回收，从而可以释放过期密钥的内存，并且在短时间内将永远不会再次访问。
#
# The default effort of the expire cycle will try to avoid having more than
# ten percent of expired keys still in memory, and will try to avoid consuming
# more than 25% of total memory and to add latency to the system. However
# it is possible to increase the expire "effort" that is normally set to
# "1", to a greater value, up to the value "10". At its maximum value the
# system will use more CPU, longer cycles (and technically may introduce
# more latency), and will tolerate less already expired keys still present
# in the system. It's a tradeoff between memory, CPU and latency.
# 过期周期的默认工作将尝试避免超过 10% 的过期密钥仍在内存中，并将尝试避免消耗超过 25% 的总内存并增加系统延迟。
# 但是，可以将通常设置为“1”的过期“努力”增加到更大的值，直到值“10”。
# 在其最大值时，系统将使用更多的 CPU、更长的周期（从技术上讲可能会引入更多的延迟），
# 并且将容忍系统中仍然存在的已过期密钥较少。这是内存、CPU 和延迟之间的权衡。
#
# active-expire-effort 1

############################# LAZY FREEING ####################################

# Redis has two primitives to delete keys. One is called DEL and is a blocking
# deletion of the object. It means that the server stops processing new commands
# in order to reclaim all the memory associated with an object in a synchronous
# way. If the key deleted is associated with a small object, the time needed
# in order to execute the DEL command is very small and comparable to most other
# O(1) or O(log_N) commands in Redis. However if the key is associated with an
# aggregated value containing millions of elements, the server can block for
# a long time (even seconds) in order to complete the operation.
# Redis 有两个删除键的原语。一种称为 DEL，是对对象的阻塞删除。
# 这意味着服务器停止处理新命令，以便以同步方式回收与对象关联的所有内存。
# 如果删除的键与一个小对象相关联，则执行 DEL 命令所需的时间非常短，与 Redis 中的大多数其他 O(1) 或 O(log_N) 命令相当。
# 但是，如果键与包含数百万个元素的聚合值相关联，则服务器可以阻塞很长时间（甚至几秒钟）以完成操作。
#
# For the above reasons Redis also offers non blocking deletion primitives
# such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and
# FLUSHDB commands, in order to reclaim memory in background. Those commands
# are executed in constant time. Another thread will incrementally free the
# object in the background as fast as possible.
# 由于上述原因，Redis 还提供了非阻塞删除原语，例如 UNLINK（非阻塞 DEL）以及 FLUSHALL 和 FLUSHDB 命令的 ASYNC 选项，
# 以便在后台回收内存。这些命令在恒定时间内执行。另一个线程将尽可能快地在后台逐步释放对象。
#
# DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.
# It's up to the design of the application to understand when it is a good
# idea to use one or the other. However the Redis server sometimes has to
# delete keys or flush the whole database as a side effect of other operations.
# Specifically Redis deletes objects independently of a user call in the
# following scenarios:
#
# 1) On eviction, because of the maxmemory and maxmemory policy configurations,
#    in order to make room for new data, without going over the specified
#    memory limit.
# 2) Because of expire: when a key with an associated time to live (see the
#    EXPIRE command) must be deleted from memory.
# 3) Because of a side effect of a command that stores data on a key that may
#    already exist. For example the RENAME command may delete the old key
#    content when it is replaced with another one. Similarly SUNIONSTORE
#    or SORT with STORE option may delete existing keys. The SET command
#    itself removes any old content of the specified key in order to replace
#    it with the specified string.
# 4) During replication, when a replica performs a full resynchronization with
#    its master, the content of the whole database is removed in order to
#    load the RDB file just transferred.
#
# In all the above cases the default is to delete objects in a blocking way,
# like if DEL was called. However you can configure each case specifically
# in order to instead release memory in a non-blocking way like if UNLINK
# was called, using the following configuration directives.
# FLUSHALL 和 FLUSHDB 的 DEL、UNLINK 和 ASYNC 选项由用户控制。由应用程序的设计决定何时使用其中一个是一个好主意。
# 然而，作为其他操作的副作用，Redis 服务器有时必须删除键或刷新整个数据库。
# 具体来说，Redis 在以下场景中独立于用户调用删除对象：
#  1) 在驱逐时，由于 maxmemory 和 maxmemory 策略配置，以便为新数据腾出空间，而不会超出指定的内存限制。
#  2) 因为过期：当一个键与一个相关的生存时间（见 EXPIRE 命令）必须从内存中删除。
#  3) 由于将数据存储在可能已经存在的键上的命令的副作用。
#     例如，RENAME 命令可能会在将旧密钥内容替换为另一个密钥内容时将其删除。
#     类似地，带有 STORE 选项的 SUNIONSTORE 或 SORT 可能会删除现有的键。
#     SET 命令本身会删除指定键的任何旧内容，以便用指定的字符串替换它。
#  4) 在复制过程中，当一个副本与它的主副本进行完全重新同步时，整个数据库的内容都会被删除，以便加载刚刚传输的 RDB 文件。
# 在上述所有情况下，默认是以阻塞方式删除对象，就像调用 DEL 一样。
# 但是，您可以使用以下配置指令专门配置每种情况，以便以非阻塞方式释放内存，例如调用 UNLINK 时。

lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no

# It is also possible, for the case when to replace the user code DEL calls
# with UNLINK calls is not easy, to modify the default behavior of the DEL
# command to act exactly like UNLINK, using the following configuration
# directive:
# 当用 UNLINK 调用替换用户代码 DEL 调用并不容易时，也可以使用以下配置指令将 DEL 命令的默认行为修改为与 UNLINK 完全相同：

lazyfree-lazy-user-del no

# FLUSHDB, FLUSHALL, SCRIPT FLUSH and FUNCTION FLUSH support both asynchronous and synchronous
# deletion, which can be controlled by passing the [SYNC|ASYNC] flags into the
# commands. When neither flag is passed, this directive will be used to determine
# if the data should be deleted asynchronously.
# FLUSHDB、FLUSHALL、SCRIPT FLUSH 和 FUNCTION FLUSH 支持异步和同步删除，可以通过将 [SYNC|ASYNC] 标志传递到命令中来控制。
# 当两个标志都没有传递时，该指令将用于确定是否应异步删除数据。

lazyfree-lazy-user-flush no

################################ THREADED I/O 线程IO #################################

# Redis is mostly single threaded, however there are certain threaded
# operations such as UNLINK, slow I/O accesses and other things that are
# performed on side threads.
# Redis 大部分是单线程的，但是有一些线程操作，例如 UNLINK、慢 IO 访问和其他在侧线程上执行的操作。
#
# Now it is also possible to handle Redis clients socket reads and writes
# in different I/O threads. Since especially writing is so slow, normally
# Redis users use pipelining in order to speed up the Redis performances per
# core, and spawn multiple instances in order to scale more. Using I/O
# threads it is possible to easily speedup two times Redis without resorting
# to pipelining nor sharding of the instance.
# 现在还可以在不同的 IO 线程中处理 Redis 客户端的套接字读取和写入。
# 由于特别是写入速度很慢，通常 Redis 用户使用流水线来加快每个内核的 Redis 性能，并生成多个实例以进行更多扩展。
# 使用 IO 线程可以轻松地将 Redis 加速两倍，而无需借助流水线或实例分片。
#
# By default threading is disabled, we suggest enabling it only in machines
# that have at least 4 or more cores, leaving at least one spare core.
# Using more than 8 threads is unlikely to help much. We also recommend using
# threaded I/O only if you actually have performance problems, with Redis
# instances being able to use a quite big percentage of CPU time, otherwise
# there is no point in using this feature.
# 默认情况下禁用线程，我们建议仅在至少有 4 个或更多内核的机器上启用它，至少保留一个备用内核。
# 使用超过 8 个线程不太可能有太大帮助。我们还建议仅在您确实遇到性能问题时才使用线程 IO，
# 因为 Redis 实例能够使用相当大比例的 CPU 时间，否则使用此功能毫无意义。
#
# So for instance if you have a four cores boxes, try to use 2 or 3 I/O
# threads, if you have a 8 cores, try to use 6 threads. In order to
# enable I/O threads use the following configuration directive:
# 因此，例如，如果您有一个四核盒子，请尝试使用 2 或 3 个 IO 线程，如果您有 8 个内核，请尝试使用 6 个线程。
# 为了启用 IO 线程，请使用以下配置指令：
#
# io-threads 4
#
# Setting io-threads to 1 will just use the main thread as usual.
# When I/O threads are enabled, we only use threads for writes, that is
# to thread the write(2) syscall and transfer the client buffers to the
# socket. However it is also possible to enable threading of reads and
# protocol parsing using the following configuration directive, by setting
# it to yes:
# 将 io-threads 设置为 1 只会像往常一样使用主线程。
# 当启用 IO 线程时，我们只使用线程进行写入，即线程化 write(2) 系统调用并将客户端缓冲区传输到套接字。
# 但是，也可以使用以下配置指令启用读取线程和协议解析，方法是将其设置为 yes：
#
# io-threads-do-reads no
#
# Usually threading reads doesn't help much.
# 通常线程读取并没有多大帮助。
#
# NOTE 1: This configuration directive cannot be changed at runtime via
# CONFIG SET. Also, this feature currently does not work when SSL is
# enabled.
#
# NOTE 2: If you want to test the Redis speedup using redis-benchmark, make
# sure you also run the benchmark itself in threaded mode, using the
# --threads option to match the number of Redis threads, otherwise you'll not
# be able to notice the improvements.
# 注意 1：此配置指令不能在运行时通过 CONFIG SET 更改。此外，当启用 SSL 时，此功能目前不起作用。
# 注意 2：如果您想使用 redis-benchmark 测试 Redis 加速，请确保您还在线程模式下运行基准测试本身，
#         使用 --threads 选项来匹配 Redis 线程的数量，否则您将无法注意改进。

############################ KERNEL OOM CONTROL 内核OOM控制##############################

# On Linux, it is possible to hint the kernel OOM killer on what processes
# should be killed first when out of memory.
# 在 Linux 上，可以提示内核 OOM 杀手在内存不足时应该首先杀死哪些进程。
#
# Enabling this feature makes Redis actively control the oom_score_adj value
# for all its processes, depending on their role. The default scores will
# attempt to have background child processes killed before all others, and
# replicas killed before masters.
# 启用此功能会使 Redis 主动控制其所有进程的 oom_score_adj 值，具体取决于它们的角色。
# 默认分数将尝试在所有其他进程之前杀死后台子进程，并在主进程之前杀死副本。
#
# Redis supports these options:
#
# no:       Don't make changes to oom-score-adj (default). 不要更改 oom-score-adj（默认）。
# yes:      Alias to "relative" see below. “relative”的别名见下文。
# absolute: Values in oom-score-adj-values are written as is to the kernel.
#           oom-score-adj-values 中的值按原样写入内核。
# relative: Values are used relative to the initial value of oom_score_adj when
#           the server starts and are then clamped to a range of -1000 to 1000.
#           Because typically the initial value is 0, they will often match the
#           absolute values.
#           当服务器启动时，这些值相对于 oom_score_adj 的初始值使用，然后被限制在 -1000 到 1000 的范围内。
#           因为通常初始值为 0，所以它们通常会匹配绝对值。
oom-score-adj no

# When oom-score-adj is used, this directive controls the specific values used
# for master, replica and background child processes. Values range -2000 to
# 2000 (higher means more likely to be killed).
# 当使用 oom-score-adj 时，该指令控制用于主进程、副本和后台子进程的特定值。
# 值的范围是 -2000 到 2000（越高意味着更有可能被杀死）。
#
# Unprivileged processes (not root, and without CAP_SYS_RESOURCE capabilities)
# can freely increase their value, but not decrease it below its initial
# settings. This means that setting oom-score-adj to "relative" and setting the
# oom-score-adj-values to positive values will always succeed.
# 非特权进程（不是 root，并且没有 CAP_SYS_RESOURCE 功能）可以自由地增加它们的值，但不能将其降低到低于其初始设置。
# 这意味着将 oom-score-adj 设置为“相对”并将 oom-score-adj-values 设置为正值将始终成功。
oom-score-adj-values 0 200 800


#################### KERNEL transparent hugepage CONTROL 内核透明大页控制######################

# Usually the kernel Transparent Huge Pages control is set to "madvise" or
# or "never" by default (/sys/kernel/mm/transparent_hugepage/enabled), in which
# case this config has no effect. On systems in which it is set to "always",
# redis will attempt to disable it specifically for the redis process in order
# to avoid latency problems specifically with fork(2) and CoW.
# If for some reason you prefer to keep it enabled, you can set this config to
# "no" and the kernel global to "always".
# 通常内核透明大页面控件默认设置为“madvise”或“从不”（syskernelmmtransparent_hugepageenabled），在这种情况下，此配置无效。
# 在将其设置为“始终”的系统上，redis 将尝试专门为 redis 进程禁用它，以避免专门针对 fork(2) 和 CoW 的延迟问题。
# 如果出于某种原因您希望保持启用状态，您可以将此配置设置为“no”，并将内核全局设置为“always”。

disable-thp yes

############################## APPEND ONLY MODE 仅附加模式###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
# 默认情况下，Redis 将数据集异步转储到磁盘上。这种模式在许多应用程序中已经足够好了，
# 但是 Redis 进程的问题或断电可能会导致几分钟的写入丢失（取决于配置的保存点）。
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
# Append Only File 是另一种持久性模式，可提供更好的持久性。
# 例如，使用默认数据 fsync 策略（请参阅配置文件的后面部分）在服务器断电等重大事件中，
# Redis 可能会丢失一秒钟的写入，或者如果 Redis 进程本身发生问题，则可能会丢失一次写入，但是操作系统仍在正常运行。
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
# AOF 和 RDB 持久化可以同时启用，没有问题。如果在启动时启用了 AOF，Redis 将加载 AOF，即具有更好持久性保证的文件。
#
# Please check https://redis.io/topics/persistence for more information.

appendonly yes

# The base name of the append only file.
# 仅附加文件的基本名称。
#
# Redis 7 and newer use a set of append-only files to persist the dataset
# and changes applied to it. There are two basic types of files in use:
# Redis 7 和更新版本使用一组仅附加文件来保存数据集和对其应用的更改。有两种基本类型的文件在使用：
#
# - Base files, which are a snapshot representing the complete state of the
#   dataset at the time the file was created. Base files can be either in
#   the form of RDB (binary serialized) or AOF (textual commands).
# - Incremental files, which contain additional commands that were applied
#   to the dataset following the previous file.
# - 基本文件，它是一个快照，表示创建文件时数据集的完整状态。基本文件可以是 RDB（二进制序列化）或 AOF（文本命令）的形式。
# - 增量文件，其中包含应用于前一个文件之后的数据集的附加命令。
#
# In addition, manifest files are used to track the files and the order in
# which they were created and should be applied.
# 此外，清单文件用于跟踪文件及其创建顺序和应用顺序。
#
# Append-only file names are created by Redis following a specific pattern.
# The file name's prefix is based on the 'appendfilename' configuration
# parameter, followed by additional information about the sequence and type.
# 仅附加文件名由 Redis 按照特定模式创建。文件名的前缀基于 'appendfilename' 配置参数，后跟有关序列和类型的附加信息。
#
# For example, if appendfilename is set to appendonly.aof, the following file
# names could be derived:
# 例如，如果 appendfilename 设置为 appendonly.aof，则可以派生以下文件名：
#
# - appendonly.aof.1.base.rdb as a base file.
# - appendonly.aof.1.incr.aof, appendonly.aof.2.incr.aof as incremental files.
# - appendonly.aof.manifest as a manifest file.

appendfilename "appendonly.aof"

# For convenience, Redis stores all persistent append-only files in a dedicated
# directory. The name of the directory is determined by the appenddirname
# configuration parameter.
# 为方便起见，Redis 将所有持久的仅附加文件存储在专用目录中。目录的名称由 appenddirname 配置参数确定。

appenddirname "appendonlydir"

# The fsync() call tells the Operating System to actually write data on disk
# instead of waiting for more data in the output buffer. Some OS will really flush
# data on disk, some other OS will just try to do it ASAP.
# fsync() 调用告诉操作系统实际将数据写入磁盘，而不是在输出缓冲区中等待更多数据。
# 有些操作系统会真正刷新磁盘上的数据，而其他一些操作系统只会尝试尽快完成。
#
# Redis supports three different modes:
# Redis 支持三种不同的模式：
#
# no: don't fsync, just let the OS flush the data when it wants. Faster.不要 fsync，只是让操作系统在需要时刷新数据。快点。
# always: fsync after every write to the append only log. Slow, Safest. 每次写入仅附加日志后的 fsync。慢，最安全。
# everysec: fsync only one time every second. Compromise. 每秒只 fsync 一次。妥协。
#
# The default is "everysec", as that's usually the right compromise between
# speed and data safety. It's up to you to understand if you can relax this to
# "no" that will let the operating system flush the output buffer when
# it wants, for better performances (but if you can live with the idea of
# some data loss consider the default persistence mode that's snapshotting),
# or on the contrary, use "always" that's very slow but a bit safer than
# everysec.
# 默认值为“每秒”，因为这通常是速度和数据安全之间的正确折衷。
# 您是否可以将其放宽为“否”，这取决于您是否可以让操作系统在需要时刷新输出缓冲区，
# 以获得更好的性能（但如果您可以忍受一些数据丢失的想法，请考虑默认持久性模式那是快照），或者相反，
# 使用“总是”，它非常慢但比everysec安全一点。
#
# More details please check the following article:
# http://antirez.com/post/redis-persistence-demystified.html
#
# If unsure, use "everysec".

# appendfsync always
appendfsync everysec
# appendfsync no

# When the AOF fsync policy is set to always or everysec, and a background
# saving process (a background save or AOF log background rewriting) is
# performing a lot of I/O against the disk, in some Linux configurations
# Redis may block too long on the fsync() call. Note that there is no fix for
# this currently, as even performing fsync in a different thread will block
# our synchronous write(2) call.
# 当 AOF fsync 策略设置为 always 或 everysec，并且后台保存进程（后台保存或 AOF 日志后台重写）正在对磁盘执行大量 IO 时，
# 在某些 Linux 配置中，Redis 可能会在 fsync( ） 称呼。
# 请注意，目前没有解决此问题的方法，因为即使在不同的线程中执行 fsync 也会阻塞我们的同步 write(2) 调用。
#
# In order to mitigate this problem it's possible to use the following option
# that will prevent fsync() from being called in the main process while a
# BGSAVE or BGREWRITEAOF is in progress.
# 为了缓解这个问题，可以使用以下选项来防止在 BGSAVE 或 BGREWRITEAOF 正在进行时在主进程中调用 fsync()。
#
# This means that while another child is saving, the durability of Redis is
# the same as "appendfsync no". In practical terms, this means that it is
# possible to lose up to 30 seconds of log in the worst scenario (with the
# default Linux settings).
# 这意味着当另一个孩子正在保存时，Redis 的持久性与“appendfsync no”相同。
# 实际上，这意味着在最坏的情况下（使用默认的 Linux 设置）可能会丢失多达 30 秒的日志。
#
# If you have latency problems turn this to "yes". Otherwise leave it as
# "no" that is the safest pick from the point of view of durability.
# 如果您有延迟问题，请将其设置为“是”。否则，将其保留为“否”，从耐用性的角度来看，这是最安全的选择。

no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
# 仅附加文件的自动重写。当 AOF 日志大小增长指定百分比时，Redis 能够自动重写隐式调用 BGREWRITEAOF 的日志文件。
#
# This is how it works: Redis remembers the size of the AOF file after the
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
# 它是这样工作的：Redis 会记住最近一次重写后 AOF 文件的大小（如果重启后没有发生过重写，则使用启动时 AOF 的大小）。
#
# This base size is compared to the current size. If the current size is
# bigger than the specified percentage, the rewrite is triggered. Also
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
# 将此基本大小与当前大小进行比较。如果当前大小大于指定百分比，则触发重写。
# 此外，您需要指定要重写的 AOF 文件的最小大小，这对于避免重写 AOF 文件很有用，即使达到百分比增加但仍然很小。
#
# Specify a percentage of zero in order to disable the automatic AOF rewrite feature.
# 指定零百分比以禁用自动 AOF 重写功能。

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during the Redis
# startup process, when the AOF data gets loaded back into memory.
# This may happen when the system where Redis is running
# crashes, especially when an ext4 filesystem is mounted without the
# data=ordered option (however this can't happen when Redis itself
# crashes or aborts but the operating system still works correctly).
# 在 Redis 启动过程的最后，当 AOF 数据被加载回内存时，可能会发现 AOF 文件被截断。
# 这可能在 Redis 运行的系统崩溃时发生，尤其是在没有 data=ordered 选项的情况下挂载 ext4 文件系统时
# （但是当 Redis 本身崩溃或中止但操作系统仍然正常工作时，这不会发生）。
#
# Redis can either exit with an error when this happens, or load as much
# data as possible (the default now) and start if the AOF file is found
# to be truncated at the end. The following option controls this behavior.
# Redis 可以在发生这种情况时退出并返回错误，或者加载尽可能多的数据（现在默认）并在发现 AOF 文件最后被截断时启动。
# 以下选项控制此行为。
#
# If aof-load-truncated is set to yes, a truncated AOF file is loaded and
# the Redis server starts emitting a log to inform the user of the event.
# Otherwise if the option is set to no, the server aborts with an error
# and refuses to start. When the option is set to no, the user requires
# to fix the AOF file using the "redis-check-aof" utility before to restart
# the server.
# 如果 aof-load-truncated 设置为 yes，则会加载截断的 AOF 文件，并且 Redis 服务器开始发出日志以通知用户该事件。
# 否则，如果该选项设置为 no，则服务器会因错误而中止并拒绝启动。
# 当该选项设置为 no 时，用户需要在重新启动服务器之前使用“redis-check-aof”实用程序修复 AOF 文件。
#
# Note that if the AOF file will be found to be corrupted in the middle
# the server will still exit with an error. This option only applies when
# Redis will try to read more data from the AOF file but not enough bytes
# will be found.
# 请注意，如果在中间发现 AOF 文件已损坏，服务器仍将退出并出现错误。
# 此选项仅适用于 Redis 将尝试从 AOF 文件读取更多数据但找不到足够字节的情况。
aof-load-truncated yes

# Redis can create append-only base files in either RDB or AOF formats. Using
# the RDB format is always faster and more efficient, and disabling it is only
# supported for backward compatibility purposes.
# Redis 可以创建 RDB 或 AOF 格式的仅附加基础文件。使用 RDB 格式总是更快、更有效，禁用它只是为了向后兼容的目的。
aof-use-rdb-preamble yes

# Redis supports recording timestamp annotations in the AOF to support restoring
# the data from a specific point-in-time. However, using this capability changes
# the AOF format in a way that may not be compatible with existing AOF parsers.
# Redis 支持在 AOF 中记录时间戳注释，以支持从特定时间点恢复数据。
# 但是，使用此功能会以可能与现有 AOF 解析器不兼容的方式更改 AOF 格式。
aof-timestamp-enabled no

################################ SHUTDOWN #####################################

# Maximum time to wait for replicas when shutting down, in seconds.
# 关闭时等待副本的最长时间，以秒为单位。
#
# During shut down, a grace period allows any lagging replicas to catch up with
# the latest replication offset before the master exists. This period can
# prevent data loss, especially for deployments without configured disk backups.
# 在关闭期间，宽限期允许任何滞后的副本在主副本存在之前赶上最新的复制偏移量。
# 这段时间可以防止数据丢失，尤其是对于没有配置磁盘备份的部署。
#
# The 'shutdown-timeout' value is the grace period's duration in seconds. It is
# only applicable when the instance has replicas. To disable the feature, set
# the value to 0.
# 'shutdown-timeout' 值是宽限期的持续时间（以秒为单位）。它仅适用于实例具有副本的情况。要禁用该功能，请将值设置为 0。
#
# shutdown-timeout 10

# When Redis receives a SIGINT or SIGTERM, shutdown is initiated and by default
# an RDB snapshot is written to disk in a blocking operation if save points are configured.
# The options used on signaled shutdown can include the following values:
# 当 Redis 接收到 SIGINT 或 SIGTERM 时，将启动关闭，并且默认情况下，如果配置了保存点，
# 则会在阻塞操作中将 RDB 快照写入磁盘。信号关闭时使用的选项可以包括以下值：
# default:  Saves RDB snapshot only if save points are configured.
#           Waits for lagging replicas to catch up.
#           仅当配置了保存点时才保存 RDB 快照。等待滞后的副本赶上。
# save:     Forces a DB saving operation even if no save points are configured.即使未配置保存点，也强制执行 DB 保存操作。
# nosave:   Prevents DB saving operation even if one or more save points are configured.即使配置了一个或多个保存点，也会阻止 DB 保存操作。
# now:      Skips waiting for lagging replicas.跳过等待滞后的副本。
# force:    Ignores any errors that would normally prevent the server from exiting.忽略通常会阻止服务器退出的任何错误。
#
# Any combination of values is allowed as long as "save" and "nosave" are not set simultaneously.
# Example: "nosave force now"
# 只要“save”和“nosave”没有同时设置，任何值的组合都是允许的。
# 示例：“nosave force now”
#
# shutdown-on-sigint default
# shutdown-on-sigterm default

################ NON-DETERMINISTIC LONG BLOCKING COMMANDS 非确定性长阻塞命令 #####################

# Maximum time in milliseconds for EVAL scripts, functions and in some cases
# modules' commands before Redis can start processing or rejecting other clients.
# 在 Redis 开始处理或拒绝其他客户端之前，EVAL 脚本、函数以及在某些情况下模块的命令的最长时间（以毫秒为单位）。
#
# If the maximum execution time is reached Redis will start to reply to most
# commands with a BUSY error.
# 如果达到最大执行时间，Redis 将开始回复大多数带有 BUSY 错误的命令。
#
# In this state Redis will only allow a handful of commands to be executed.
# For instance, SCRIPT KILL, FUNCTION KILL, SHUTDOWN NOSAVE and possibly some
# module specific 'allow-busy' commands.
# 在这种状态下，Redis 将只允许执行少数命令。
# 例如，SCRIPT KILL、FUNCTION KILL、SHUTDOWN NOSAVE 以及可能某些模块特定的“allow-busy”命令。
#
# SCRIPT KILL and FUNCTION KILL will only be able to stop a script that did not
# yet call any write commands, so SHUTDOWN NOSAVE may be the only way to stop
# the server in the case a write command was already issued by the script when
# the user doesn't want to wait for the natural termination of the script.
# SCRIPT KILL 和 FUNCTION KILL 将只能停止尚未调用任何写入命令的脚本，
# 因此如果脚本已经发出写入命令而用户未发出写入命令，则 SHUTDOWN NOSAVE 可能是停止服务器的唯一方法不想等待脚本自然终止。
#
# The default is 5 seconds. It is possible to set it to 0 or a negative value
# to disable this mechanism (uninterrupted execution). Note that in the past
# this config had a different name, which is now an alias, so both of these do
# the same:
# 默认值为 5 秒。可以将其设置为 0 或负值以禁用此机制（不间断执行）。
# 请注意，过去这个配置有一个不同的名称，现在是一个别名，所以这两个都做同样的事情：
# lua-time-limit 5000
# busy-reply-threshold 5000

################################ REDIS CLUSTER  ###############################

# Normal Redis instances can't be part of a Redis Cluster; only nodes that are
# started as cluster nodes can. In order to start a Redis instance as a
# cluster node enable the cluster support uncommenting the following:
# 普通 Redis 实例不能成为 Redis 集群的一部分；只有作为集群节点启动的节点才可以。
# 为了将 Redis 实例作为集群节点启动，请启用集群支持取消注释以下内容：
#
# cluster-enabled yes

# Every cluster node has a cluster configuration file. This file is not
# intended to be edited by hand. It is created and updated by Redis nodes.
# Every Redis Cluster node requires a different cluster configuration file.
# Make sure that instances running in the same system do not have
# overlapping cluster configuration file names.
# 每个集群节点都有一个集群配置文件。此文件不适合手动编辑。它由 Redis 节点创建和更新。
# 每个 Redis 集群节点都需要不同的集群配置文件。确保在同一系统中运行的实例没有重叠的集群配置文件名。
#
# cluster-config-file nodes-6379.conf

# Cluster node timeout is the amount of milliseconds a node must be unreachable
# for it to be considered in failure state.
# Most other internal time limits are a multiple of the node timeout.
# 集群节点超时是节点必须无法访问才能被视为故障状态的毫秒数。大多数其他内部时间限制是节点超时的倍数。
#
# cluster-node-timeout 15000

# The cluster port is the port that the cluster bus will listen for inbound connections on. When set 
# to the default value, 0, it will be bound to the command port + 10000. Setting this value requires 
# you to specify the cluster bus port when executing cluster meet.
# 集群端口是集群总线将侦听入站连接的端口。设置为默认值0时，会绑定到命令端口+10000。
# 设置此值需要在执行cluster meet时指定集群总线端口。
# cluster-port 0

# A replica of a failing master will avoid to start a failover if its data
# looks too old.
# 如果数据看起来太旧，故障主服务器的副本将避免启动故障转移。
#
# There is no simple way for a replica to actually have an exact measure of
# its "data age", so the following two checks are performed:
# 副本实际上没有简单的方法来准确测量其“数据年龄”，因此执行以下两项检查：
#
# 1) If there are multiple replicas able to failover, they exchange messages
#    in order to try to give an advantage to the replica with the best
#    replication offset (more data from the master processed).
#    Replicas will try to get their rank by offset, and apply to the start
#    of the failover a delay proportional to their rank.
# 1) 如果有多个副本能够进行故障转移，它们会交换消息以尝试为具有最佳复制偏移量的副本提供优势（处理来自主控的更多数据）。
#    副本将尝试通过偏移量获得它们的排名，并在故障转移开始时应用与其排名成比例的延迟。
#
# 2) Every single replica computes the time of the last interaction with
#    its master. This can be the last ping or command received (if the master
#    is still in the "connected" state), or the time that elapsed since the
#    disconnection with the master (if the replication link is currently down).
#    If the last interaction is too old, the replica will not try to failover
#    at all.
# 2）每一个副本计算最后一次与其主节点交互的时间。
# 这可以是最后一次收到的 ping 或命令（如果主服务器仍处于“已连接”状态），
# 或者自与主服务器断开连接以来经过的时间（如果复制链接当前已关闭）。
# 如果最后一次交互太旧，则副本根本不会尝试故障转移。
#
# The point "2" can be tuned by user. Specifically a replica will not perform
# the failover if, since the last interaction with the master, the time
# elapsed is greater than:
# 点“2”可由用户调整。具体来说，如果自上次与主服务器交互后，经过的时间大于：
#
#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period
#
# So for example if node-timeout is 30 seconds, and the cluster-replica-validity-factor
# is 10, and assuming a default repl-ping-replica-period of 10 seconds, the
# replica will not try to failover if it was not able to talk with the master
# for longer than 310 seconds.
# 因此，例如，如果 node-timeout 是 30 秒，cluster-replica-validity-factor 是 10，
# 并且假设默认 repl-ping-replica-period 为 10 秒，则副本将不会尝试故障转移，如果它不能与主人交谈超过 310 秒。
#
# A large cluster-replica-validity-factor may allow replicas with too old data to failover
# a master, while a too small value may prevent the cluster from being able to
# elect a replica at all.
# 一个大的 cluster-replica-validity-factor 可能允许具有太旧数据的副本对 master 进行故障转移，
# 而一个太小的值可能会阻止集群完全能够选择一个副本。
#
# For maximum availability, it is possible to set the cluster-replica-validity-factor
# to a value of 0, which means, that replicas will always try to failover the
# master regardless of the last time they interacted with the master.
# (However they'll always try to apply a delay proportional to their
# offset rank).
# 为了获得最大可用性，可以将 cluster-replica-validity-factor 设置为值 0，
# 这意味着副本将始终尝试对 master 进行故障转移，而不管它们上次与 master 交互的时间。
# （但是他们总是会尝试应用与其偏移等级成比例的延迟）。
#
# Zero is the only value able to guarantee that when all the partitions heal
# the cluster will always be able to continue.
# 零是唯一能够保证当所有分区都愈合时集群将始终能够继续运行的值。
#
# cluster-replica-validity-factor 10

# Cluster replicas are able to migrate to orphaned masters, that are masters
# that are left without working replicas. This improves the cluster ability
# to resist to failures as otherwise an orphaned master can't be failed over
# in case of failure if it has no working replicas.
# 集群副本能够迁移到孤立的主服务器，即没有工作副本的主服务器。
# 这提高了集群抵抗故障的能力，否则如果孤立的主服务器没有工作副本，则在发生故障时无法进行故障转移。
#
# Replicas migrate to orphaned masters only if there are still at least a
# given number of other working replicas for their old master. This number
# is the "migration barrier". A migration barrier of 1 means that a replica
# will migrate only if there is at least 1 other working replica for its master
# and so forth. It usually reflects the number of replicas you want for every
# master in your cluster.
# 只有当它们的旧主服务器仍有至少给定数量的其他工作副本时，副本才会迁移到孤立的主服务器。
# 这个数字就是“迁移障碍”。迁移屏障为 1 意味着只有当其主副本至少有 1 个其他工作副本时，
# 副本才会迁移，依此类推。它通常反映了您希望集群中每个主服务器的副本数量。
#
# Default is 1 (replicas migrate only if their masters remain with at least
# one replica). To disable migration just set it to a very large value or
# set cluster-allow-replica-migration to 'no'.
# A value of 0 can be set but is useful only for debugging and dangerous
# in production.
# 默认值为 1（仅当它们的主服务器保留至少一个副本时，副本才会迁移）。
# 要禁用迁移，只需将其设置为一个非常大的值或将 cluster-allow-replica-migration 设置为“no”。
# 可以设置 0 值，但仅对调试有用，在生产中很危险。
#
# cluster-migration-barrier 1

# Turning off this option allows to use less automatic cluster configuration.
# It both disables migration to orphaned masters and migration from masters
# that became empty.
# 关闭此选项允许使用较少的自动集群配置。它既禁止迁移到孤立的主控，也禁用从变空的主控的迁移。
#
# Default is 'yes' (allow automatic migrations).
# 默认为“是”（允许自动迁移）。
#
# cluster-allow-replica-migration yes

# By default Redis Cluster nodes stop accepting queries if they detect there
# is at least a hash slot uncovered (no available node is serving it).
# This way if the cluster is partially down (for example a range of hash slots
# are no longer covered) all the cluster becomes, eventually, unavailable.
# It automatically returns available as soon as all the slots are covered again.
# 默认情况下，如果 Redis Cluster 节点检测到至少有一个未覆盖的哈希槽（没有可用的节点为其提供服务），它们就会停止接受查询。
# 这样，如果集群部分关闭（例如，不再覆盖一系列哈希槽），所有集群最终都会变得不可用。
# 一旦再次覆盖所有插槽，它就会自动返回可用。
#
# However sometimes you want the subset of the cluster which is working,
# to continue to accept queries for the part of the key space that is still
# covered. In order to do so, just set the cluster-require-full-coverage
# option to no.
# 但是，有时您希望正在工作的集群子集继续接受对仍覆盖的部分键空间的查询。
# 为此，只需将 cluster-require-full-coverage 选项设置为 no。
#
# cluster-require-full-coverage yes

# This option, when set to yes, prevents replicas from trying to failover its
# master during master failures. However the replica can still perform a
# manual failover, if forced to do so.
# 此选项设置为 yes 时，可防止副本在 master 故障期间尝试对其 master 进行故障转移。
# 但是，如果强制执行，副本仍然可以执行手动故障转移。
#
# This is useful in different scenarios, especially in the case of multiple
# data center operations, where we want one side to never be promoted if not
# in the case of a total DC failure.
# 这在不同的场景中很有用，尤其是在多个数据中心运营的情况下，如果不是在 DC 完全故障的情况下，我们希望一方永远不会被提升。
#
# cluster-replica-no-failover no

# This option, when set to yes, allows nodes to serve read traffic while the
# cluster is in a down state, as long as it believes it owns the slots.
# 此选项设置为 yes 时，允许节点在集群处于关闭状态时提供读取流量，只要它认为自己拥有插槽。
#
# This is useful for two cases.  The first case is for when an application
# doesn't require consistency of data during node failures or network partitions.
# One example of this is a cache, where as long as the node has the data it
# should be able to serve it.
# 这对两种情况很有用。第一种情况是应用程序在节点故障或网络分区期间不需要数据一致性。
# 一个例子是缓存，只要节点有数据，它就应该能够为它提供服务。
#
# The second use case is for configurations that don't meet the recommended
# three shards but want to enable cluster mode and scale later. A
# master outage in a 1 or 2 shard configuration causes a read/write outage to the
# entire cluster without this option set, with it set there is only a write outage.
# Without a quorum of masters, slot ownership will not change automatically.
# 第二个用例适用于不符合推荐的三个分片但希望启用集群模式并稍后扩展的配置。
# 在没有设置此选项的情况下，1 或 2 分片配置中的主服务器中断会导致整个集群的读写中断，如果设置了该选项，则只有写入中断。
# 如果没有法定人数的主人，插槽所有权不会自动改变。
#
# cluster-allow-reads-when-down no

# This option, when set to yes, allows nodes to serve pubsub shard traffic while
# the cluster is in a down state, as long as it believes it owns the slots.
# 此选项设置为 yes 时，允许节点在集群处于关闭状态时为 pubsub 分片流量提供服务，只要它认为自己拥有插槽。
#
# This is useful if the application would like to use the pubsub feature even when
# the cluster global stable state is not OK. If the application wants to make sure only
# one shard is serving a given channel, this feature should be kept as yes.
# 如果应用程序想要使用 pubsub 功能，即使集群全局稳定状态不正常，这也很有用。
# 如果应用程序想要确保只有一个分片为给定通道提供服务，则此功能应保持为是。
#
# cluster-allow-pubsubshard-when-down yes

# Cluster link send buffer limit is the limit on the memory usage of an individual
# cluster bus link's send buffer in bytes. Cluster links would be freed if they exceed
# this limit. This is to primarily prevent send buffers from growing unbounded on links
# toward slow peers (E.g. PubSub messages being piled up).
# This limit is disabled by default. Enable this limit when 'mem_cluster_links' INFO field
# and/or 'send-buffer-allocated' entries in the 'CLUSTER LINKS` command output continuously increase.
# Minimum limit of 1gb is recommended so that cluster link buffer can fit in at least a single
# PubSub message by default. (client-query-buffer-limit default value is 1gb)
# 集群链路发送缓冲区限制是对单个集群总线链路的发送缓冲区的内存使用限制（以字节为单位）。
# 如果超过此限制，集群链接将被释放。这主要是为了防止发送缓冲区在指向慢速对等点的链接上无限增长（例如，PubSub 消息被堆积）。
# 默认情况下禁用此限制。当 'CLUSTER LINKS' 命令输出中的 'mem_cluster_links' INFO 字段
# 和/或 'send-buffer-allocated' 条目持续增加时，启用此限制。
# 建议最小限制为 1gb，以便集群链接缓冲区默认情况下可以容纳至少一个 PubSub 消息。 (client-query-buffer-limit 默认值为 1gb)
#
# cluster-link-sendbuf-limit 0
 
# Clusters can configure their announced hostname using this config. This is a common use case for 
# applications that need to use TLS Server Name Indication (SNI) or dealing with DNS based
# routing. By default this value is only shown as additional metadata in the CLUSTER SLOTS
# command, but can be changed using 'cluster-preferred-endpoint-type' config. This value is 
# communicated along the clusterbus to all nodes, setting it to an empty string will remove 
# the hostname and also propagate the removal.
# 集群可以使用此配置配置其宣布的主机名。这是需要使用 TLS 服务器名称指示 (SNI) 或处理基于 DNS 的路由的应用程序的常见用例。
# 默认情况下，此值仅在 CLUSTER SLOTS 命令中显示为附加元数据，但可以使用“cluster-preferred-endpoint-type”配置进行更改。
# 该值沿集群总线传递给所有节点，将其设置为空字符串将删除主机名并传播删除。
#
# cluster-announce-hostname ""

# Clusters can advertise how clients should connect to them using either their IP address,
# a user defined hostname, or by declaring they have no endpoint. Which endpoint is
# shown as the preferred endpoint is set by using the cluster-preferred-endpoint-type
# config with values 'ip', 'hostname', or 'unknown-endpoint'. This value controls how
# the endpoint returned for MOVED/ASKING requests as well as the first field of CLUSTER SLOTS. 
# If the preferred endpoint type is set to hostname, but no announced hostname is set, a '?' 
# will be returned instead.
# 集群可以通告客户端应该如何使用它们的 IP 地址、用户定义的主机名或通过声明它们没有端点来连接它们。
# 哪个端点显示为首选端点是通过使用具有值“ip”、“主机名”或“未知端点”的 cluster-preferred-endpoint-type 配置来设置的。
# 此值控制端点如何返回 MOVEDASKING 请求以及 CLUSTER SLOTS 的第一个字段。
# 如果首选端点类型设置为主机名，但未设置宣布的主机名，则“？”将被退回。
#
# When a cluster advertises itself as having an unknown endpoint, it's indicating that
# the server doesn't know how clients can reach the cluster. This can happen in certain 
# networking situations where there are multiple possible routes to the node, and the 
# server doesn't know which one the client took. In this case, the server is expecting
# the client to reach out on the same endpoint it used for making the last request, but use
# the port provided in the response.
# 当集群宣称自己具有未知端点时，这表明服务器不知道客户端如何访问集群。
# 这可能发生在某些网络情况下，其中有多个可能的路由到节点，并且服务器不知道客户端选择了哪一个。
# 在这种情况下，服务器期望客户端访问它用于发出最后一个请求的同一端点，但使用响应中提供的端口。
#
# cluster-preferred-endpoint-type ip

# In order to setup your cluster make sure to read the documentation
# available at https://redis.io web site.
# 为了设置您的集群，请务必阅读 https:redis.io 网站上提供的文档。

########################## CLUSTER DOCKER/NAT support  ########################

# In certain deployments, Redis Cluster nodes address discovery fails, because
# addresses are NAT-ted or because ports are forwarded (the typical case is
# Docker and other containers).
# 在某些部署中，Redis Cluster 节点地址发现失败，因为地址经过 NAT 或端口转发（典型情况是 Docker 和其他容器）。
#
# In order to make Redis Cluster working in such environments, a static
# configuration where each node knows its public address is needed. The
# following four options are used for this scope, and are:
# 为了使 Redis Cluster 在这样的环境中工作，需要一个每个节点都知道其公共地址的静态配置。以下四个选项用于此范围，它们是：
#
# * cluster-announce-ip
# * cluster-announce-port
# * cluster-announce-tls-port
# * cluster-announce-bus-port
#
# Each instructs the node about its address, client ports (for connections
# without and with TLS) and cluster message bus port. The information is then
# published in the header of the bus packets so that other nodes will be able to
# correctly map the address of the node publishing the information.
# 每个都向节点指示其地址、客户端端口（用于没有和使用 TLS 的连接）和集群消息总线端口。
# 然后该信息在总线数据包的报头中发布，以便其他节点能够正确映射发布信息的节点的地址。
#
# If cluster-tls is set to yes and cluster-announce-tls-port is omitted or set
# to zero, then cluster-announce-port refers to the TLS port. Note also that
# cluster-announce-tls-port has no effect if cluster-tls is set to no.
# 如果 cluster-tls 设置为 yes 并且 cluster-announce-tls-port 被省略或设置为零，
# 则 cluster-announce-port 指的是 TLS 端口。
# 另请注意，如果 cluster-tls 设置为 no，则 cluster-announce-tls-port 无效。
#
# If the above options are not used, the normal Redis Cluster auto-detection
# will be used instead.
# 如果不使用上述选项，将使用正常的 Redis Cluster 自动检测来代替。
#
# Note that when remapped, the bus port may not be at the fixed offset of
# clients port + 10000, so you can specify any port and bus-port depending
# on how they get remapped. If the bus-port is not set, a fixed offset of
# 10000 will be used as usual.
# 请注意，重新映射时，总线端口可能不在客户端端口 + 10000 的固定偏移处，因此您可以根据重新映射的方式指定任何端口和总线端口。
# 如果未设置总线端口，将照常使用 10000 的固定偏移量。
#
# Example:
#
# cluster-announce-ip 10.1.1.5
# cluster-announce-tls-port 6379
# cluster-announce-port 0
# cluster-announce-bus-port 6380

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include the I/O operations
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command (this is the only
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime).
# Redis 慢日志是一个记录超过指定执行时间的查询的系统。
# 执行时间不包括与客户端交谈、发送回复等IO操作，而只是实际执行命令所需的时间
# （这是命令执行中唯一一个线程被阻塞无法服务的阶段同时提出其他要求）。
#
# You can configure the slow log with two parameters: one tells Redis
# what is the execution time, in microseconds, to exceed in order for the
# command to get logged, and the other parameter is the length of the
# slow log. When a new command is logged the oldest one is removed from the
# queue of logged commands.
# 您可以使用两个参数配置慢日志：一个告诉 Redis 要超过多少执行时间（以微秒为单位）才能记录命令，另一个参数是慢日志的长度。
# 当记录新命令时，最旧的命令将从记录的命令队列中删除。

# The following time is expressed in microseconds, so 1000000 is equivalent
# to one second. Note that a negative number disables the slow log, while
# a value of zero forces the logging of every command.
# 下面的时间用微秒表示，所以1000000相当于一秒。
# 请注意，负数会禁用慢日志，而零值会强制记录每个命令。
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory.
# You can reclaim memory used by the slow log with SLOWLOG RESET.
# 这个长度没有限制。请注意，它会消耗内存。您可以使用 SLOWLOG RESET 回收慢速日志使用的内存。
slowlog-max-len 128

################################ LATENCY MONITOR 延迟监视器##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance.
# Redis 延迟监控子系统在运行时对不同的操作进行采样，以收集与 Redis 实例的可能延迟来源相关的数据。
#
# Via the LATENCY command this information is available to the user that can
# print graphs and obtain reports.
# 通过 LATENCY 命令，可以打印图表和获取报告的用户可以使用此信息。
#
# The system only logs operations that were performed in a time equal or
# greater than the amount of milliseconds specified via the
# latency-monitor-threshold configuration directive. When its value is set
# to zero, the latency monitor is turned off.
# 系统仅记录在等于或大于通过 delay-monitor-threshold 配置指令指定的毫秒数的时间内执行的操作。
# 当其值设置为零时，延迟监视器将关闭。
#
# By default latency monitoring is disabled since it is mostly not needed
# if you don't have latency issues, and collecting data has a performance
# impact, that while very small, can be measured under big load. Latency
# monitoring can easily be enabled at runtime using the command
# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.
# 默认情况下，延迟监控是禁用的，因为如果您没有延迟问题，通常不需要它，并且收集数据会影响性能，
# 虽然非常小，但可以在大负载下进行测量。
# 如果需要，可以使用命令“CONFIG SET latency-monitor-threshold <milliseconds>”在运行时轻松启用延迟监控。
latency-monitor-threshold 0

################################ LATENCY TRACKING 延迟跟踪##############################

# The Redis extended latency monitoring tracks the per command latencies and enables
# exporting the percentile distribution via the INFO latencystats command,
# and cumulative latency distributions (histograms) via the LATENCY command.
# Redis 扩展延迟监控跟踪每个命令的延迟，并允许通过 INFO latencystats 命令导出百分位分布，
# 并通过 LATENCY 命令导出累积延迟分布（直方图）。
#
# By default, the extended latency monitoring is enabled since the overhead
# of keeping track of the command latency is very small.
# 默认情况下，启用扩展延迟监控，因为跟踪命令延迟的开销非常小。
# latency-tracking yes

# By default the exported latency percentiles via the INFO latencystats command
# are the p50, p99, and p999.
# 默认情况下，通过 INFO latencystats 命令导出的延迟百分位数是 p50、p99 和 p999。
# latency-tracking-info-percentiles 50 99 99.9

############################# EVENT NOTIFICATION 活动通知##############################

# Redis can notify Pub/Sub clients about events happening in the key space.
# This feature is documented at https://redis.io/topics/notifications
# Redis 可以通知 Pub/Sub 客户端有关密钥空间中发生的事件。此功能记录在 https:redis.iotopicsnotifications
#
# For instance if keyspace events notification is enabled, and a client
# performs a DEL operation on key "foo" stored in the Database 0, two
# messages will be published via Pub/Sub:
# 例如，如果启用了键空间事件通知，并且客户端对存储在数据库 0 中的键“foo”执行 DEL 操作，则将通过 PubSub 发布两条消息：
#
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
#
# It is possible to select the events that Redis will notify among a set
# of classes. Every class is identified by a single character:
# 可以在一组类中选择 Redis 将通知的事件。每个类都由一个字符标识：
#
#  K     Keyspace events, published with __keyspace@<db>__ prefix.
#  E     Keyevent events, published with __keyevent@<db>__ prefix.
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
#  $     String commands
#  l     List commands
#  s     Set commands
#  h     Hash commands
#  z     Sorted set commands
#  x     Expired events (events generated every time a key expires 每次密钥过期时生成的事件)
#  e     Evicted events (events generated when a key is evicted for maxmemory 为 maxmemory 逐出键时生成的事件)
#  n     New key events (Note: not included in the 'A' class 注意：不包括在“A”类中)
#  t     Stream commands
#  d     Module key type events
#  m     Key-miss events (Note: It is not included in the 'A' class)
#  A     Alias for g$lshzxetd, so that the "AKE" string means all the events
#        (Except key-miss events which are excluded from 'A' due to their
#         unique nature).
#        g$lshzxetd 的别名，因此“AKE”字符串表示所有事件（由于其独特性而被排除在“A”之外的键未命中事件除外）。
#
#  The "notify-keyspace-events" takes as argument a string that is composed
#  of zero or multiple characters. The empty string means that notifications
#  are disabled.
# “notify-keyspace-events”将由零个或多个字符组成的字符串作为参数。空字符串表示禁用通知。
#
#  Example: to enable list and generic events, from the point of view of the
#           event name, use:
# 示例：要启用列表和通用事件，从事件名称的角度来看，使用：
#
#  notify-keyspace-events Elg
#
#  Example 2: to get the stream of the expired keys subscribing to channel
#             name __keyevent@0__:expired use:
# 示例 2：要获取订阅频道名称 __keyevent@0__:expired 的过期键的流，请使用：
#
#  notify-keyspace-events Ex
#
#  By default all notifications are disabled because most users don't need
#  this feature and the feature has some overhead. Note that if you don't
#  specify at least one of K or E, no events will be delivered.
# 默认情况下，所有通知都被禁用，因为大多数用户不需要此功能并且该功能有一些开销。
# 请注意，如果您未指定 K 或 E 中的至少一个，则不会传递任何事件。
notify-keyspace-events ""

############################### ADVANCED CONFIG 高级配置###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
# 哈希在条目数量较少且最大条目不超过给定阈值时使用内存高效数据结构进行编码。可以使用以下指令配置这些阈值。
hash-max-listpack-entries 512
hash-max-listpack-value 64

# Lists are also encoded in a special way to save a lot of space.
# The number of entries allowed per internal list node can be specified
# as a fixed maximum size or a maximum number of elements.
# For a fixed maximum size, use -5 through -1, meaning:
# 列表也以特殊方式编码以节省大量空间。每个内部列表节点允许的条目数可以指定为固定的最大大小或最大元素数。
# 对于固定的最大大小，请使用 -5 到 -1，这意味着：
# -5: max size: 64 Kb  <-- not recommended for normal workloads 不推荐用于正常工作负载
# -4: max size: 32 Kb  <-- not recommended
# -3: max size: 16 Kb  <-- probably not recommended 可能不推荐
# -2: max size: 8 Kb   <-- good
# -1: max size: 4 Kb   <-- good
# Positive numbers mean store up to _exactly_ that number of elements
# per list node.
# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),
# but if your use case is unique, adjust the settings as necessary.
# 正数意味着每个列表节点最多存储_exactly_该数量的元素。
# 性能最高的选项通常是 -2（8 Kb 大小）或 -1（4 Kb 大小），但如果您的用例独特，请根据需要调整设置。
list-max-listpack-size -2

# Lists may also be compressed.
# Compress depth is the number of quicklist ziplist nodes from *each* side of
# the list to *exclude* from compression.  The head and tail of the list
# are always uncompressed for fast push/pop operations.  Settings are:
# 列表也可以被压缩。压缩深度是要从压缩中排除的列表每一侧的快速列表 ziplist 节点的数量。
# 对于快速 pushpop 操作，列表的头部和尾部始终未压缩。设置如下：
# 0: disable all list compression 禁用所有列表压缩
# 1: depth 1 means "don't start compressing until after 1 node into the list,
#    going from either the head or tail"
#    So: [head]->node->node->...->node->[tail]
#    [head], [tail] will always be uncompressed; inner nodes will compress.
#    depth 1 表示“直到 1 个节点进入列表后才开始压缩，从头或尾开始”所以：
#    [head]->node->node->...->node->[tail] [ head], [tail] 将始终未压缩；内部节点将压缩。
# 2: [head]->[next]->node->node->...->node->[prev]->[tail]
#    2 here means: don't compress head or head->next or tail->prev or tail,
#    but compress all nodes between them.
#    [head]->[next]->node->node->...->node->[prev]->[tail]
#    2 这里的意思是：不压缩head或者head->next或者tail-> prev 或 tail，但压缩它们之间的所有节点。
# 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]
# etc.
list-compress-depth 0

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
# The following configuration setting sets the limit in the size of the
# set in order to use this special memory saving encoding.
# 集合仅在一种情况下具有特殊编码：当集合仅由字符串组成时，这些字符串恰好是 64 位有符号整数范围内的基数为 10 的整数。
# 以下配置设置设置了集合大小的限制，以便使用这种特殊的内存节省编码。
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
# 与哈希和列表类似，排序集也经过特殊编码以节省大量空间。仅当排序集的长度和元素低于以下限制时，才使用此编码：
zset-max-listpack-entries 128
zset-max-listpack-value 64

# HyperLogLog sparse representation bytes limit. The limit includes the
# 16 bytes header. When an HyperLogLog using the sparse representation crosses
# this limit, it is converted into the dense representation.
# HyperLogLog 稀疏表示字节限制。该限制包括 16 字节的标头。当使用稀疏表示的 HyperLogLog 超过此限制时，它会转换为密集表示。
#
# A value greater than 16000 is totally useless, since at that point the
# dense representation is more memory efficient.
# 大于 16000 的值完全没有用，因为此时密集表示的内存效率更高。
#
# The suggested value is ~ 3000 in order to have the benefits of
# the space efficient encoding without slowing down too much PFADD,
# which is O(N) with the sparse encoding. The value can be raised to
# ~ 10000 when CPU is not a concern, but space is, and the data set is
# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
# 建议的值约为 3000，以便在不减慢太多 PFADD 的情况下获得空间高效编码的好处，稀疏编码为 O(N)。
# 当 CPU 不是问题，但空间是问题时，该值可以提高到 ~ 10000，并且数据集由许多 HyperLogLogs 组成，基数在 0 - 15000 范围内。
hll-sparse-max-bytes 3000

# Streams macro node max size / items. The stream data structure is a radix
# tree of big nodes that encode multiple items inside. Using this configuration
# it is possible to configure how big a single node can be in bytes, and the
# maximum number of items it may contain before switching to a new node when
# appending new stream entries. If any of the following settings are set to
# zero, the limit is ignored, so for instance it is possible to set just a
# max entries limit by setting max-bytes to 0 and max-entries to the desired
# value.
# 流宏节点最大大小的项目。流数据结构是大节点的基数树，其中编码多个项目。
# 使用此配置，可以配置单个节点的大小（以字节为单位），以及在附加新流条目时切换到新节点之前它可能包含的最大项目数。
# 如果以下任何设置设置为零，则忽略限制，例如，可以通过将 max-bytes 设置为 0 并将 max-entries 设置为所需值来设置最大条目限制。
stream-node-max-bytes 4096
stream-node-max-entries 100

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation Redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into a hash table
# that is rehashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
# 主动重新散列每 100 毫秒 CPU 时间使用 1 毫秒，以帮助重新散列主 Redis 散列表（将顶级键映射到值的表）。
#  Redis 使用的哈希表实现（参见 dict.c）执行延迟重新哈希：在重新哈希的哈希表中运行的操作越多，
# 执行的重新哈希“步骤”就越多，因此如果服务器空闲，重新哈希永远不会完成哈希表使用了更多内存。
#
# The default is to use this millisecond 10 times every second in order to
# actively rehash the main dictionaries, freeing memory when possible.
# 默认设置是每秒使用此毫秒 10 次，以便主动重新散列主字典，尽可能释放内存。
#
# If unsure:
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with 2 milliseconds delay.
# 如果不确定：
# 如果您有硬延迟要求，请使用“activerehashing no”，并且在您的环境中 Redis 可以不时以 2 毫秒延迟回复查询并不是一件好事。
#
# use "activerehashing yes" if you don't have such hard requirements but
# want to free memory asap when possible.
# 如果您没有这么严格的要求，但希望尽可能快地释放内存，请使用“activerehashing yes”。
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason (a
# common reason is that a Pub/Sub client can't consume messages as fast as the
# publisher can produce them).
# 客户端输出缓冲区限制可用于强制断开由于某种原因无法从服务器读取数据的速度不够快的客户端
# （常见原因是 PubSub 客户端无法像发布者生成消息那样快地使用消息）。
#
# The limit can be set differently for the three different classes of clients:
# 可以为三种不同类别的客户端设置不同的限制：
#
# normal -> normal clients including MONITOR clients 普通客户，包括 MONITOR 客户
# replica -> replica clients 副本客户端
# pubsub -> clients subscribed to at least one pubsub channel or pattern 客户订阅了至少一个 pub/sub 频道或模式
#
# The syntax of every client-output-buffer-limit directive is the following:
# 每个 client-output-buffer-limit 指令的语法如下：
#
# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
#
# A client is immediately disconnected once the hard limit is reached, or if
# the soft limit is reached and remains reached for the specified number of
# seconds (continuously).
# So for instance if the hard limit is 32 megabytes and the soft limit is
# 16 megabytes / 10 seconds, the client will get disconnected immediately
# if the size of the output buffers reach 32 megabytes, but will also get
# disconnected if the client reaches 16 megabytes and continuously overcomes
# the limit for 10 seconds.
# 一旦达到硬限制，或者如果达到软限制并保持达到指定的秒数（连续），客户端将立即断开连接。
# 因此，例如，如果硬限制是 32 兆字节，软限制是 16 兆字节 10 秒，如果输出缓冲区的大小达到 32 兆字节，
# 客户端将立即断开连接，但如果客户端达到 16 兆字节并且连续不断，客户端也会断开连接超过10秒的限制。
#
# By default normal clients are not limited because they don't receive data
# without asking (in a push way), but just after a request, so only
# asynchronous clients may create a scenario where data is requested faster
# than it can read.
# 默认情况下，普通客户端不受限制，因为它们不会在不请求（以推送方式）的情况下接收数据，
# 而是在请求之后，因此只有异步客户端可能会创建数据请求比读取速度更快的场景。
#
# Instead there is a default limit for pubsub and replica clients, since
# subscribers and replicas receive data in a push fashion.
# 相反，pubsub 和副本客户端有一个默认限制，因为订阅者和副本以推送方式接收数据。
#
# Note that it doesn't make sense to set the replica clients output buffer
# limit lower than the repl-backlog-size config (partial sync will succeed
# and then replica will get disconnected).
# Such a configuration is ignored (the size of repl-backlog-size will be used).
# This doesn't have memory consumption implications since the replica client
# will share the backlog buffers memory.
# 请注意，将副本客户端输出缓冲区限制设置为低于 repl-backlog-size 配置是没有意义的（部分同步将成功，然后副本将断开连接）。
# 这样的配置将被忽略（将使用 repl-backlog-size 的大小）。这不会影响内存消耗，因为副本客户端将共享积压缓冲区内存。
#
# Both the hard or the soft limit can be disabled by setting them to zero.
# 硬限制或软限制都可以通过将它们设置为零来禁用。
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Client query buffers accumulate new commands. They are limited to a fixed
# amount by default in order to avoid that a protocol desynchronization (for
# instance due to a bug in the client) will lead to unbound memory usage in
# the query buffer. However you can configure it here if you have very special
# needs, such us huge multi/exec requests or alike.
# 客户端查询缓冲区累积新命令。默认情况下，它们被限制为固定数量，
# 以避免协议去同步（例如由于客户端中的错误）将导致查询缓冲区中未绑定的内存使用。
# 但是，如果您有非常特殊的需求，例如我们巨大的 multiexec 请求等，您可以在此处配置它。
#
# client-query-buffer-limit 1gb

# In some scenarios client connections can hog up memory leading to OOM
# errors or data eviction. To avoid this we can cap the accumulated memory
# used by all client connections (all pubsub and normal clients). Once we
# reach that limit connections will be dropped by the server freeing up
# memory. The server will attempt to drop the connections using the most 
# memory first. We call this mechanism "client eviction".
# 在某些情况下，客户端连接可能会占用内存，导致 OOM 错误或数据驱逐。
# 为了避免这种情况，我们可以限制所有客户端连接（所有 pubsub 和普通客户端）使用的累积内存。
# 一旦达到该限制，服务器将释放连接，释放内存。服务器将首先尝试删除使用最多内存的连接。我们称这种机制为“客户端驱逐”。
#
# Client eviction is configured using the maxmemory-clients setting as follows:
# 0 - client eviction is disabled (default)
# 客户端逐出使用 maxmemory-clients 设置进行配置，如下所示：
#    0 - 禁用客户端逐出（默认）
#
# A memory value can be used for the client eviction threshold,
# for example:
# 内存值可用于客户端驱逐阈值，例如：
# maxmemory-clients 1g
#
# A percentage value (between 1% and 100%) means the client eviction threshold
# is based on a percentage of the maxmemory setting. For example to set client
# eviction at 5% of maxmemory:
# 百分比值（介于 1% 和 100% 之间）表示客户端驱逐阈值基于 maxmemory 设置的百分比。
# 例如，将客户端驱逐设置为 maxmemory 的 5%：
# maxmemory-clients 5%

# In the Redis protocol, bulk requests, that are, elements representing single
# strings, are normally limited to 512 mb. However you can change this limit
# here, but must be 1mb or greater
# 在 Redis 协议中，批量请求（即表示单个字符串的元素）通常限制为 512 mb。但是您可以在此处更改此限制，但必须为 1mb 或更大
#
# proto-max-bulk-len 512mb

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
# Redis 调用一个内部函数来执行许多后台任务，例如超时关闭客户端连接、清除从未请求过的过期键等等。
#
# Not all tasks are performed with the same frequency, but Redis checks for
# tasks to perform according to the specified "hz" value.
# 并非所有任务都以相同的频率执行，但 Redis 根据指定的“hz”值检查要执行的任务。
#
# By default "hz" is set to 10. Raising the value will use more CPU when
# Redis is idle, but at the same time will make Redis more responsive when
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
# 默认 "hz" 设置为 10。提高该值会在 Redis 空闲时使用更多 CPU，
# 但同时会在有多个 key 同时过期时使 Redis 响应更快，超时可能会处理更多精确。
#
# The range is between 1 and 500, however a value over 100 is usually not
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
# 范围在 1 到 500 之间，但是超过 100 的值通常不是一个好主意。
# 大多数用户应该使用默认值 10，并且仅在需要非常低延迟的环境中将其提高到 100。
hz 10

# Normally it is useful to have an HZ value which is proportional to the
# number of clients connected. This is useful in order, for instance, to
# avoid too many clients are processed for each background task invocation
# in order to avoid latency spikes.
# 通常，具有与连接的客户端数量成比例的 HZ 值很有用。
# 例如，为了避免每次后台任务调用处理过多的客户端以避免延迟峰值，这很有用。
#
# Since the default HZ value by default is conservatively set to 10, Redis
# offers, and enables by default, the ability to use an adaptive HZ value
# which will temporarily raise when there are many connected clients.
# 由于默认的默认 HZ 值保守地设置为 10，因此 Redis 提供并默认启用使用自适应 HZ 值的能力，
# 当有许多连接的客户端时，该值会暂时提高。
#
# When dynamic HZ is enabled, the actual configured HZ will be used
# as a baseline, but multiples of the configured HZ value will be actually
# used as needed once more clients are connected. In this way an idle
# instance will use very little CPU time while a busy instance will be
# more responsive.
# 启用动态 HZ 时，实际配置的 HZ 将用作基线，但一旦连接更多客户端，将根据需要实际使用配置的 HZ 值的倍数。
# 这样，空闲实例将使用非常少的 CPU 时间，而繁忙的实例将更加响应。
dynamic-hz yes

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 4 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
# 当孩子重写 AOF 文件时，如果启用以下选项，则文件将每生成 4 MB 数据进行一次 fsync-ed。
# 这对于以增量方式将文件提交到磁盘并避免大的延迟峰值非常有用。
aof-rewrite-incremental-fsync yes

# When redis saves RDB file, if the following option is enabled
# the file will be fsync-ed every 4 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
# 当 redis 保存 RDB 文件时，如果启用以下选项，文件将每生成 4 MB 数据进行一次 fsync-ed。
# 这对于以增量方式将文件提交到磁盘并避免大的延迟峰值非常有用。
rdb-save-incremental-fsync yes

# Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good
# idea to start with the default settings and only change them after investigating
# how to improve the performances and how the keys LFU change over time, which
# is possible to inspect via the OBJECT FREQ command.
# Redis LFU eviction（参见 maxmemory 设置）可以调整。
# 但是，最好从默认设置开始，仅在研究如何提高性能以及 LFU 键如何随时间变化后更改它们，这可以通过 OBJECT FREQ 命令进行检查。
#
# There are two tunable parameters in the Redis LFU implementation: the
# counter logarithm factor and the counter decay time. It is important to
# understand what the two parameters mean before changing them.
# Redis LFU 实现中有两个可调参数：计数器对数因子和计数器衰减时间。在更改它们之前了解这两个参数的含义很重要。
#
# The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis
# uses a probabilistic increment with logarithmic behavior. Given the value
# of the old counter, when a key is accessed, the counter is incremented in
# this way:
#
# 1. A random number R between 0 and 1 is extracted.
# 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).
# 3. The counter is incremented only if R < P.
# LFU 计数器每个键只有 8 位，最大值为 255，因此 Redis 使用具有对数行为的概率增量。
# 给定旧计数器的值，当访问一个键时，计数器以这种方式递增：
# 1. 提取一个介于 0 和 1 之间的随机数 R。
# 2.概率P计算为1(old_valuelfu_log_factor+1)。
# 3. 仅当 R < P 时计数器才递增。
#
# The default lfu-log-factor is 10. This is a table of how the frequency
# counter changes with a different number of accesses with different
# logarithmic factors:
# 默认 lfu-log-factor 为 10。这是频率计数器如何随具有不同对数因子的不同访问次数而变化的表格：
#
# +--------+------------+------------+------------+------------+------------+
# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |
# +--------+------------+------------+------------+------------+------------+
# | 0      | 104        | 255        | 255        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 1      | 18         | 49         | 255        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 10     | 10         | 18         | 142        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 100    | 8          | 11         | 49         | 143        | 255        |
# +--------+------------+------------+------------+------------+------------+
#
# NOTE: The above table was obtained by running the following commands:
# 注意：上表是通过运行以下命令获得的：
#
#   redis-benchmark -n 1000000 incr foo
#   redis-cli object freq foo
#
# NOTE 2: The counter initial value is 5 in order to give new objects a chance
# to accumulate hits.
# 注意 2：计数器初始值为 5，以便让新对象有机会累积命中。
#
# The counter decay time is the time, in minutes, that must elapse in order
# for the key counter to be divided by two (or decremented if it has a value
# less <= 10).
# 计数器衰减时间是必须经过的时间，以分钟为单位，以便密钥计数器除以 2（或者如果它的值小于 <= 10，则减少）。
#
# The default value for the lfu-decay-time is 1. A special value of 0 means to
# decay the counter every time it happens to be scanned.
# lfu-decay-time 的默认值为 1。特殊值 0 表示每次碰巧扫描计数器时衰减计数器。
#
# lfu-log-factor 10
# lfu-decay-time 1

########################### ACTIVE DEFRAGMENTATION 主动碎片整理#######################
#
# What is active defragmentation? 什么是主动碎片整理？
# -------------------------------
#
# Active (online) defragmentation allows a Redis server to compact the
# spaces left between small allocations and deallocations of data in memory,
# thus allowing to reclaim back memory.
# 主动（在线）碎片整理允许 Redis 服务器压缩内存中数据的小分配和释放之间留下的空间，从而允许回收内存。
#
# Fragmentation is a natural process that happens with every allocator (but
# less so with Jemalloc, fortunately) and certain workloads. Normally a server
# restart is needed in order to lower the fragmentation, or at least to flush
# away all the data and create it again. However thanks to this feature
# implemented by Oran Agra for Redis 4.0 this process can happen at runtime
# in a "hot" way, while the server is running.
# 碎片化是每个分配器（幸运的是，Jemalloc 较少）和某些工作负载都会发生的自然过程。
# 通常需要重新启动服务器以降低碎片，或者至少清除所有数据并重新创建它。
# 然而，由于 Oran Agra 为 Redis 4.0 实现的这个特性，这个过程可以在运行时以“热”的方式发生，同时服务器正在运行。
#
# Basically when the fragmentation is over a certain level (see the
# configuration options below) Redis will start to create new copies of the
# values in contiguous memory regions by exploiting certain specific Jemalloc
# features (in order to understand if an allocation is causing fragmentation
# and to allocate it in a better place), and at the same time, will release the
# old copies of the data. This process, repeated incrementally for all the keys
# will cause the fragmentation to drop back to normal values.
# 基本上，当碎片超过某个级别时（请参阅下面的配置选项），
# Redis 将开始通过利用某些特定的 Jemalloc 功能在连续的内存区域中创建值的新副本
# （以了解分配是否导致碎片并分配它在一个更好的地方），同时，将释放数据的旧副本。
# 对所有键增量重复此过程将导致碎片回落到正常值。
#
# Important things to understand:
#
# 1. This feature is disabled by default, and only works if you compiled Redis
#    to use the copy of Jemalloc we ship with the source code of Redis.
#    This is the default with Linux builds.
#
# 2. You never need to enable this feature if you don't have fragmentation
#    issues.
#
# 3. Once you experience fragmentation, you can enable this feature when
#    needed with the command "CONFIG SET activedefrag yes".
# 需要了解的重要事项：
#   1. 此功能默认禁用，仅当您编译 Redis 以使用我们随 Redis 源代码提供的 Jemalloc 副本时才有效。这是 Linux 构建的默认设置。
#   2. 如果您没有碎片问题，则无需启用此功能。
#   3. 一旦遇到碎片，您可以在需要时使用命令“CONFIG SET activedefrag yes”启用此功能。
#
# The configuration parameters are able to fine tune the behavior of the
# defragmentation process. If you are not sure about what they mean it is
# a good idea to leave the defaults untouched.
# 配置参数能够微调碎片整理过程的行为。如果您不确定它们的含义，最好保持默认设置不变。

# Active defragmentation is disabled by default
# 默认情况下禁用主动碎片整理
# activedefrag no

# Minimum amount of fragmentation waste to start active defrag
# 启动主动碎片整理的最小碎片浪费量
# active-defrag-ignore-bytes 100mb

# Minimum percentage of fragmentation to start active defrag
# 启动主动碎片整理的最小碎片百分比
# active-defrag-threshold-lower 10

# Maximum percentage of fragmentation at which we use maximum effort
# 我们使用最大努力的最大碎片百分比
# active-defrag-threshold-upper 100

# Minimal effort for defrag in CPU percentage, to be used when the lower
# threshold is reached
# CPU 百分比碎片整理的最小工作量，在达到较低阈值时使用
# active-defrag-cycle-min 1

# Maximal effort for defrag in CPU percentage, to be used when the upper
# threshold is reached
# CPU 百分比碎片整理的最大努力，达到上限阈值时使用
# active-defrag-cycle-max 25

# Maximum number of set/hash/zset/list fields that will be processed from
# the main dictionary scan
# 将从主字典扫描中处理的最大 sethashzsetlist 字段数
# active-defrag-max-scan-fields 1000

# Jemalloc background thread for purging will be enabled by default
# 用于清除的 Jemalloc 后台线程将默认启用
jemalloc-bg-thread yes

# It is possible to pin different threads and processes of Redis to specific
# CPUs in your system, in order to maximize the performances of the server.
# This is useful both in order to pin different Redis threads in different
# CPUs, but also in order to make sure that multiple Redis instances running
# in the same host will be pinned to different CPUs.
# 可以将 Redis 的不同线程和进程固定到系统中的特定 CPU，以最大限度地提高服务器的性能。
# 这有助于将不同的 Redis 线程固定在不同的 CPU 中，也可以确保在同一主机上运行的多个 Redis 实例将固定到不同的 CPU。
#
# Normally you can do this using the "taskset" command, however it is also
# possible to this via Redis configuration directly, both in Linux and FreeBSD.
# 通常您可以使用“taskset”命令执行此操作，但是在 Linux 和 FreeBSD 中也可以直接通过 Redis 配置来执行此操作。
#
# You can pin the server/IO threads, bio threads, aof rewrite child process, and
# the bgsave child process. The syntax to specify the cpu list is the same as
# the taskset command:
# 您可以固定 serverIO 线程、bio 线程、aof rewrite 子进程和 bgsave 子进程。指定cpu列表的语法与taskset命令相同：
#
# Set redis server/io threads to cpu affinity 0,2,4,6:
# 将 redis serverio 线程设置为 cpu 亲和性 0、2、4、6：
# server_cpulist 0-7:2
#
# Set bio threads to cpu affinity 1,3:
# 将 bio 线程设置为 cpu 亲和力 1,3：
# bio_cpulist 1,3
#
# Set aof rewrite child process to cpu affinity 8,9,10,11:
# 将 aof rewrite 子进程设置为 cpu 亲和性 8、9、10、11：
# aof_rewrite_cpulist 8-11
#
# Set bgsave child process to cpu affinity 1,10,11
# 将 bgsave 子进程设置为 cpu 亲和性 1,10,11
# bgsave_cpulist 1,10-11

# In some cases redis will emit warnings and even refuse to start if it detects
# that the system is in bad state, it is possible to suppress these warnings
# by setting the following config which takes a space delimited list of warnings
# to suppress
# 在某些情况下，如果 redis 检测到系统处于不良状态，redis 会发出警告甚至拒绝启动，
# 可以通过设置以下配置来抑制这些警告，该配置采用空格分隔的警告列表来抑制
#
# ignore-warnings ARM64-COW-BUG
